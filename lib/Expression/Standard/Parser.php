<?php
/*
 *  OPEN POWER LIBS <http://www.invenzzia.org>
 *
 * This file is subject to the new BSD license that is bundled
 * with this package in the file LICENSE. It is also available through
 * WWW at this URL: <http://www.invenzzia.org/license/new-bsd>
 *
 * Copyright (c) Invenzzia Group <http://www.invenzzia.org>
 * and other contributors. See website for details.
 *
 * $Id$
 */

/**
 * The expression parser for OPT. Note: do not edit this file
 * manually. It was generated by PHP Parser Generator by Gregory Beaver.
 * Instead, use the file /tools/lexer/expression_parser.y and parse
 * it with /tools/lexer/generateExpression.php.
 */
class Opt_Expression_Standard_yyToken implements ArrayAccess
{
    public $string = '';
    public $metadata = array();

    function __construct($s, $m = array())
    {
        if ($s instanceof Opt_Expression_Standard_yyToken) {
            $this->string = $s->string;
            $this->metadata = $s->metadata;
        } else {
            $this->string = (string) $s;
            if ($m instanceof Opt_Expression_Standard_yyToken) {
                $this->metadata = $m->metadata;
            } elseif (is_array($m)) {
                $this->metadata = $m;
            }
        }
    }

    function __toString()
    {
        return $this->_string;
    }

    function offsetExists($offset)
    {
        return isset($this->metadata[$offset]);
    }

    function offsetGet($offset)
    {
        return $this->metadata[$offset];
    }

    function offsetSet($offset, $value)
    {
        if ($offset === null) {
            if (isset($value[0])) {
                $x = ($value instanceof Opt_Expression_Standard_yyToken) ?
                    $value->metadata : $value;
                $this->metadata = array_merge($this->metadata, $x);
                return;
            }
            $offset = count($this->metadata);
        }
        if ($value === null) {
            return;
        }
        if ($value instanceof Opt_Expression_Standard_yyToken) {
            if ($value->metadata) {
                $this->metadata[$offset] = $value->metadata;
            }
        } elseif ($value) {
            $this->metadata[$offset] = $value;
        }
    }

    function offsetUnset($offset)
    {
        unset($this->metadata[$offset]);
    }
}

class Opt_Expression_Standard_yyStackEntry
{
    public $stateno;       /* The state-number */
    public $major;         /* The major token value.  This is the code
                     ** number for the token at this stack level */
    public $minor; /* The user-supplied minor token value.  This
                     ** is the value of the token  */
};


#line 3 "expression_parser.y"
class Opt_Expression_Standard_Parser#line 79 "expression_parser.php"
{
#line 6 "expression_parser.y"

	/**
	 * The expression engine object.
	 * @var Opt_Expression_Standard
	 */
	private $_expr;

	/**
	 * Constructs the expression parser.
	 *
	 * @param Opt_Expression_Standard $expr The expression engine used for parsing.
	 */
	public function __construct(Opt_Expression_Standard $expr)
	{
		$this->_expr = $expr;
	} // end __construct();
#line 99 "expression_parser.php"

    const T_AND                            =  1;
    const T_OR                             =  2;
    const T_XOR                            =  3;
    const T_EQUALS                         =  4;
    const T_EQUALS_T                       =  5;
    const T_NEQUALS                        =  6;
    const T_NEQUALS_T                      =  7;
    const T_GT                             =  8;
    const T_GTE                            =  9;
    const T_LT                             = 10;
    const T_LTE                            = 11;
    const T_IS_BETWEEN                     = 12;
    const T_IS_NOT_BETWEEN                 = 13;
    const T_IS_EITHER                      = 14;
    const T_IS_NEITHER                     = 15;
    const T_CONTAINS                       = 16;
    const T_CONTAINS_EITHER                = 17;
    const T_CONTAINS_NEITHER               = 18;
    const T_CONTAINS_BOTH                  = 19;
    const T_IS_IN                          = 20;
    const T_IS_NOT_IN                      = 21;
    const T_IS_IN_EITHER                   = 22;
    const T_IS_IN_NEITHER                  = 23;
    const T_IS_IN_BOTH                     = 24;
    const T_ADD                            = 25;
    const T_SUB                            = 26;
    const T_MINUS                          = 27;
    const T_CONCAT                         = 28;
    const T_MUL                            = 29;
    const T_DIV                            = 30;
    const T_MOD                            = 31;
    const T_COLON                          = 32;
    const T_EXP                            = 33;
    const T_NOT                            = 34;
    const T_ASSIGN                         = 35;
    const T_INCREMENT                      = 36;
    const T_DECREMENT                      = 37;
    const T_NOR                            = 38;
    const T_IS_EITHER_IN                   = 39;
    const T_IS_NEITHER_IN                  = 40;
    const T_IS_BOTH_IN                     = 41;
    const T_L_BRACKET                      = 42;
    const T_R_BRACKET                      = 43;
    const T_IS                             = 44;
    const T_EXISTS                         = 45;
    const T_CLONE                          = 46;
    const T_BACKTICK_STRING                = 47;
    const T_NULL                           = 48;
    const T_STRING                         = 49;
    const T_IDENTIFIER                     = 50;
    const T_NUMBER                         = 51;
    const T_TRUE                           = 52;
    const T_FALSE                          = 53;
    const T_LSQ_BRACKET                    = 54;
    const T_RSQ_BRACKET                    = 55;
    const T_COMMA                          = 56;
    const T_DOLLAR                         = 57;
    const T_AT                             = 58;
    const T_DOT                            = 59;
    const T_OBJECT_OPERATOR                = 60;
    const T_NEW                            = 61;
    const YY_NO_ACTION = 322;
    const YY_ACCEPT_ACTION = 321;
    const YY_ERROR_ACTION = 320;

    const YY_SZ_ACTTAB = 2906;
static public $yy_action = array(
 /*     0 */    47,   44,   45,   41,   37,   39,   40,   55,   52,   50,
 /*    10 */    30,    6,    9,   35,   31,   14,   15,   17,   11,   34,
 /*    20 */    33,   28,   22,   20,   49,   51,   54,   13,   48,   38,
 /*    30 */    46,   10,   42,  201,   67,   73,  200,   67,   28,   22,
 /*    40 */    20,   72,  160,  161,  195,   68,   66,  185,  167,    3,
 /*    50 */   173,  194,   67,  172,  176,    4,  302,   47,   44,   45,
 /*    60 */    41,   37,   39,   40,   55,   52,   50,   30,    6,    9,
 /*    70 */    35,   31,   14,   15,   17,   11,   34,   33,  196,   61,
 /*    80 */   148,   49,   51,   54,   13,   48,   38,   46,  166,   42,
 /*    90 */   138,  154,  155,  165,  176,   28,   22,   20,  174,  179,
 /*   100 */   177,   47,   44,   45,   41,   37,   39,   40,   55,   52,
 /*   110 */    50,   30,    6,    9,   35,   31,   14,   15,   17,   11,
 /*   120 */    34,   33,  197,  145,   62,   49,   51,   54,   13,   48,
 /*   130 */    38,   46,  203,   42,    5,  182,  134,  130,   16,   28,
 /*   140 */    22,   20,   47,   44,   45,   41,   37,   39,   40,   55,
 /*   150 */    52,   50,   30,    6,    9,   35,   31,   14,   15,   17,
 /*   160 */    11,   34,   33,   65,  150,   12,   49,   51,   54,   13,
 /*   170 */    48,   38,   46,   10,   42,  152,  156,  141,   58,  151,
 /*   180 */    28,   22,   20,   47,   44,   45,   41,   37,   39,   40,
 /*   190 */    55,   52,   50,   30,    6,    9,   35,   31,   14,   15,
 /*   200 */    17,   11,   34,   33,  157,    1,   59,   49,   51,   54,
 /*   210 */    13,   48,   38,   46,  144,   42,   64,  210,  210,  210,
 /*   220 */    21,   28,   22,   20,   47,   44,   45,   41,   37,   39,
 /*   230 */    40,   55,   52,   50,   30,    6,    9,   35,   31,   14,
 /*   240 */    15,   17,   11,   34,   33,  210,  210,  210,   49,   51,
 /*   250 */    54,   13,   48,   38,   46,  210,   42,  210,  210,  210,
 /*   260 */   210,   32,   28,   22,   20,   47,   44,   45,   41,   37,
 /*   270 */    39,   40,   55,   52,   50,   30,    6,    9,   35,   31,
 /*   280 */    14,   15,   17,   11,   34,   33,  210,  210,  210,   49,
 /*   290 */    51,   54,   13,   48,   38,   46,  166,   42,  173,    1,
 /*   300 */    71,  165,  176,   28,   22,   20,   72,  160,  161,  195,
 /*   310 */    68,   66,  185,  167,  210,  147,  210,   63,  172,  176,
 /*   320 */     4,  210,   47,   44,   45,   41,   37,   39,   40,   55,
 /*   330 */    52,   50,   30,    6,    9,   35,   31,   14,   15,   17,
 /*   340 */    11,   34,   33,  210,  210,  210,   49,   51,   54,   13,
 /*   350 */    48,   38,   46,  191,   42,  132,  210,  210,  165,  176,
 /*   360 */    28,   22,   20,  210,  202,  210,   47,   44,   45,   41,
 /*   370 */    37,   39,   40,   55,   52,   50,   30,    6,    9,   35,
 /*   380 */    31,   14,   15,   17,   11,   34,   33,  210,  210,  210,
 /*   390 */    49,   51,   54,   13,   48,   38,   46,  210,   42,   48,
 /*   400 */    38,   46,  210,   42,   28,   22,   20,   42,  210,   28,
 /*   410 */    22,   20,  210,   28,   22,   20,  210,  210,  210,  210,
 /*   420 */    75,  210,   47,   44,   45,   41,   37,   39,   40,   55,
 /*   430 */    52,   50,   30,    6,    9,   35,   31,   14,   15,   17,
 /*   440 */    11,   34,   33,  210,  210,  210,   49,   51,   54,   13,
 /*   450 */    48,   38,   46,  191,   42,  173,  210,  210,  165,  176,
 /*   460 */    28,   22,   20,   18,   44,   45,   41,   37,   39,   40,
 /*   470 */    55,   52,   50,   30,    6,    9,   35,   31,   14,   15,
 /*   480 */    17,   11,   34,   33,  210,  210,  210,   49,   51,   54,
 /*   490 */    13,   48,   38,   46,  207,   42,  133,  210,  210,  172,
 /*   500 */   176,   28,   22,   20,    7,   44,   45,   41,   37,   39,
 /*   510 */    40,   55,   52,   50,   30,    6,    9,   35,   31,   14,
 /*   520 */    15,   17,   11,   34,   33,  210,  210,  210,   49,   51,
 /*   530 */    54,   13,   48,   38,   46,  207,   42,  173,  210,  210,
 /*   540 */   172,  176,   28,   22,   20,    8,   44,   45,   41,   37,
 /*   550 */    39,   40,   55,   52,   50,   30,    6,    9,   35,   31,
 /*   560 */    14,   15,   17,   11,   34,   33,  210,  210,  210,   49,
 /*   570 */    51,   54,   13,   48,   38,   46,  210,   42,  210,  210,
 /*   580 */   210,  210,  210,   28,   22,   20,  216,  216,   45,   41,
 /*   590 */    37,   39,   40,   55,   52,   50,   30,    6,    9,   35,
 /*   600 */    31,   14,   15,   17,   11,   34,   33,  210,  210,  210,
 /*   610 */    49,   51,   54,   13,   48,   38,   46,  210,   42,  210,
 /*   620 */   210,  210,  210,  210,   28,   22,   20,   47,   27,   45,
 /*   630 */    41,   37,   39,   40,   55,   52,   50,   30,    6,    9,
 /*   640 */    35,   31,   14,   15,   17,   11,   34,   33,  210,  210,
 /*   650 */   210,   49,   51,   54,   13,   48,   38,   46,  210,   42,
 /*   660 */   210,  210,  210,  210,  210,   28,   22,   20,   24,   44,
 /*   670 */    45,   41,   37,   39,   40,   55,   52,   50,   30,    6,
 /*   680 */     9,   35,   31,   14,   15,   17,   11,   34,   33,  210,
 /*   690 */   210,  210,   49,   51,   54,   13,   48,   38,   46,  210,
 /*   700 */    42,  210,  210,  210,  210,  210,   28,   22,   20,   47,
 /*   710 */    36,   45,   41,   37,   39,   40,   55,   52,   50,   30,
 /*   720 */     6,    9,   35,   31,   14,   15,   17,   11,   34,   33,
 /*   730 */   210,  210,  210,   49,   51,   54,   13,   48,   38,   46,
 /*   740 */   210,   42,  210,  210,  210,  210,  210,   28,   22,   20,
 /*   750 */   215,   44,   45,   41,   37,   39,   40,   55,   52,   50,
 /*   760 */    30,    6,    9,   35,   31,   14,   15,   17,   11,   34,
 /*   770 */    33,  210,  210,  210,   49,   51,   54,   13,   48,   38,
 /*   780 */    46,  210,   42,  210,  210,  210,  210,  210,   28,   22,
 /*   790 */    20,   47,   19,   45,   41,   37,   39,   40,   55,   52,
 /*   800 */    50,   30,    6,    9,   35,   31,   14,   15,   17,   11,
 /*   810 */    34,   33,  210,  210,  210,   49,   51,   54,   13,   48,
 /*   820 */    38,   46,  210,   42,  210,  210,  210,  210,  210,   28,
 /*   830 */    22,   20,   44,   45,   41,   37,   39,   40,   55,   52,
 /*   840 */    50,   30,    6,    9,   35,   31,   14,   15,   17,   11,
 /*   850 */    34,   33,  210,  210,  210,   49,   51,   54,   13,   48,
 /*   860 */    38,   46,  210,   42,  210,  210,  210,  210,  210,   28,
 /*   870 */    22,   20,  210,   45,   41,   37,   39,   40,   55,   52,
 /*   880 */    50,   30,    6,    9,   35,   31,   14,   15,   17,   11,
 /*   890 */    34,   33,  210,  210,  210,   49,   51,   54,   13,   48,
 /*   900 */    38,   46,  210,   42,   43,  210,  210,  210,  210,   28,
 /*   910 */    22,   20,  206,  204,   41,   37,   39,   40,   55,   52,
 /*   920 */    50,   30,    6,    9,   35,   31,   14,   15,   17,   11,
 /*   930 */    34,   33,  210,  210,  210,   49,   51,   54,   13,   48,
 /*   940 */    38,   46,  210,   42,  210,  210,  210,  210,  210,   28,
 /*   950 */    22,   20,   55,   52,   50,   30,    6,    9,   35,   31,
 /*   960 */    14,   15,   17,   11,   34,   33,  210,  210,  210,   49,
 /*   970 */    51,   54,   13,   48,   38,   46,  210,   42,  210,  210,
 /*   980 */   210,  210,  210,   28,   22,   20,   76,  171,   69,  153,
 /*   990 */   158,  164,  163,  162,   72,  160,  161,  195,   68,   66,
 /*  1000 */   185,  184,  186,  190,  140,  131,  210,  210,  210,  199,
 /*  1010 */   210,  210,  180,  210,  175,  198,  142,   79,  171,   69,
 /*  1020 */   153,  158,  164,  163,  162,   72,  160,  161,  195,   68,
 /*  1030 */    66,  185,  184,  186,  190,  136,  131,  210,  210,  210,
 /*  1040 */   199,  210,  210,  180,  210,  175,  198,  210,   79,  171,
 /*  1050 */    69,  153,  158,  164,  163,  162,   72,  160,  161,  195,
 /*  1060 */    68,   66,  185,  184,  186,  190,  205,  131,  210,  210,
 /*  1070 */   210,  199,  210,  210,  180,  210,  175,  198,  210,   83,
 /*  1080 */   171,   69,  153,  158,  164,  163,  162,   72,  160,  161,
 /*  1090 */   195,   68,   66,  185,  184,  186,  190,  210,  210,  210,
 /*  1100 */   210,  210,  199,  210,  210,  180,  210,  175,  198,  159,
 /*  1110 */   321,   87,  171,   69,  153,  158,  164,  163,  162,   72,
 /*  1120 */   160,  161,  195,   68,   66,  185,  184,  186,  190,  210,
 /*  1130 */   210,  210,  210,  210,  199,  210,  210,  180,  210,  175,
 /*  1140 */   198,   83,  171,   69,  153,  158,  164,  163,  162,   72,
 /*  1150 */   160,  161,  195,   68,   66,  185,  184,  186,  190,  210,
 /*  1160 */   210,  210,  210,  210,  199,  210,  210,  180,  210,  175,
 /*  1170 */   198,  143,  117,  171,   69,  153,  158,  164,  163,  162,
 /*  1180 */    72,  160,  161,  195,   68,   66,  185,  184,  186,  190,
 /*  1190 */   210,  210,  210,  210,  210,  199,  210,  210,  180,  210,
 /*  1200 */   175,  198,  102,  171,   69,  153,  158,  164,  163,  162,
 /*  1210 */    72,  160,  161,  195,   68,   66,  185,  184,  186,  190,
 /*  1220 */   210,  210,  210,  210,  210,  199,  210,  210,  180,  210,
 /*  1230 */   175,  198,  118,  171,   69,  153,  158,  164,  163,  162,
 /*  1240 */    72,  160,  161,  195,   68,   66,  185,  184,  186,  190,
 /*  1250 */   210,  210,  210,  210,  210,  199,  210,  210,  180,  210,
 /*  1260 */   175,  198,  210,  113,  171,   69,  153,  158,  164,  163,
 /*  1270 */   162,   72,  160,  161,  195,   68,   66,  185,  184,  186,
 /*  1280 */   190,  210,  210,  210,  210,  210,  199,  210,  210,  180,
 /*  1290 */   210,  175,  198,   84,  171,   69,  153,  158,  164,  163,
 /*  1300 */   162,   72,  160,  161,  195,   68,   66,  185,  184,  186,
 /*  1310 */   190,  210,  210,  210,  210,  210,  199,  210,  210,  180,
 /*  1320 */   210,  175,  198,  119,  171,   69,  153,  158,  164,  163,
 /*  1330 */   162,   72,  160,  161,  195,   68,   66,  185,  184,  186,
 /*  1340 */   190,  210,  210,  210,  210,  210,  199,  210,  210,  180,
 /*  1350 */   210,  175,  198,  210,  126,  171,   69,  153,  158,  164,
 /*  1360 */   163,  162,   72,  160,  161,  195,   68,   66,  185,  184,
 /*  1370 */   186,  190,  210,  210,  210,  210,  210,  199,  210,  210,
 /*  1380 */   180,  210,  175,  198,   98,  171,   69,  153,  158,  164,
 /*  1390 */   163,  162,   72,  160,  161,  195,   68,   66,  185,  184,
 /*  1400 */   186,  190,  210,  210,  210,  210,  210,  199,  210,  210,
 /*  1410 */   180,  210,  175,  198,  108,  171,   69,  153,  158,  164,
 /*  1420 */   163,  162,   72,  160,  161,  195,   68,   66,  185,  184,
 /*  1430 */   186,  190,  210,  210,  210,  210,  210,  199,  210,  210,
 /*  1440 */   180,  210,  175,  198,  210,  105,  171,   69,  153,  158,
 /*  1450 */   164,  163,  162,   72,  160,  161,  195,   68,   66,  185,
 /*  1460 */   184,  186,  190,  210,  210,  210,  210,  210,  199,  210,
 /*  1470 */   210,  180,  210,  175,  198,  120,  171,   69,  153,  158,
 /*  1480 */   164,  163,  162,   72,  160,  161,  195,   68,   66,  185,
 /*  1490 */   184,  186,  190,  210,  210,  210,  210,  210,  199,  210,
 /*  1500 */   210,  180,  210,  175,  198,  100,  171,   69,  153,  158,
 /*  1510 */   164,  163,  162,   72,  160,  161,  195,   68,   66,  185,
 /*  1520 */   184,  186,  190,  210,  210,  210,  210,  210,  199,  210,
 /*  1530 */   210,  180,  210,  175,  198,  210,  109,  171,   69,  153,
 /*  1540 */   158,  164,  163,  162,   72,  160,  161,  195,   68,   66,
 /*  1550 */   185,  184,  186,  190,  210,  210,  210,  210,  210,  199,
 /*  1560 */   210,  210,  180,  210,  175,  198,  101,  171,   69,  153,
 /*  1570 */   158,  164,  163,  162,   72,  160,  161,  195,   68,   66,
 /*  1580 */   185,  184,  186,  190,  210,  210,  210,  210,  210,  199,
 /*  1590 */   210,  210,  180,  210,  175,  198,   99,  171,   69,  153,
 /*  1600 */   158,  164,  163,  162,   72,  160,  161,  195,   68,   66,
 /*  1610 */   185,  184,  186,  190,  210,  210,  210,  210,  210,  199,
 /*  1620 */   210,  210,  180,  210,  175,  198,  210,  124,  171,   69,
 /*  1630 */   153,  158,  164,  163,  162,   72,  160,  161,  195,   68,
 /*  1640 */    66,  185,  184,  186,  190,  210,  210,  210,  210,  210,
 /*  1650 */   199,  210,  210,  180,  210,  175,  198,   81,  171,   69,
 /*  1660 */   153,  158,  164,  163,  162,   72,  160,  161,  195,   68,
 /*  1670 */    66,  185,  184,  186,  190,  210,  210,  210,  210,  210,
 /*  1680 */   199,  210,  210,  180,  210,  175,  198,  106,  171,   69,
 /*  1690 */   153,  158,  164,  163,  162,   72,  160,  161,  195,   68,
 /*  1700 */    66,  185,  184,  186,  190,  210,  210,  210,  210,  210,
 /*  1710 */   199,  210,  210,  180,  210,  175,  198,  210,  128,  171,
 /*  1720 */    69,  153,  158,  164,  163,  162,   72,  160,  161,  195,
 /*  1730 */    68,   66,  185,  184,  186,  190,  210,  210,  210,  210,
 /*  1740 */   210,  199,  210,  210,  180,  210,  175,  198,   86,  171,
 /*  1750 */    69,  153,  158,  164,  163,  162,   72,  160,  161,  195,
 /*  1760 */    68,   66,  185,  184,  186,  190,  210,  210,  210,  210,
 /*  1770 */   210,  199,  210,  210,  180,  210,  175,  198,  122,  171,
 /*  1780 */    69,  153,  158,  164,  163,  162,   72,  160,  161,  195,
 /*  1790 */    68,   66,  185,  184,  186,  190,  210,  210,  210,  210,
 /*  1800 */   210,  199,  210,  210,  180,  210,  175,  198,  210,  104,
 /*  1810 */   171,   69,  153,  158,  164,  163,  162,   72,  160,  161,
 /*  1820 */   195,   68,   66,  185,  184,  186,  190,  210,  210,  210,
 /*  1830 */   210,  210,  199,  210,  210,  180,  210,  175,  198,  107,
 /*  1840 */   171,   69,  153,  158,  164,  163,  162,   72,  160,  161,
 /*  1850 */   195,   68,   66,  185,  184,  186,  190,  210,  210,  210,
 /*  1860 */   210,  210,  199,  210,  210,  180,  210,  175,  198,  127,
 /*  1870 */   171,   69,  153,  158,  164,  163,  162,   72,  160,  161,
 /*  1880 */   195,   68,   66,  185,  184,  186,  190,  210,  210,  210,
 /*  1890 */   210,  210,  199,  210,  210,  180,  210,  175,  198,  210,
 /*  1900 */   103,  171,   69,  153,  158,  164,  163,  162,   72,  160,
 /*  1910 */   161,  195,   68,   66,  185,  184,  186,  190,  210,  210,
 /*  1920 */   210,  210,  210,  199,  210,  210,  180,  210,  175,  198,
 /*  1930 */    90,  171,   69,  153,  158,  164,  163,  162,   72,  160,
 /*  1940 */   161,  195,   68,   66,  185,  184,  186,  190,  210,  210,
 /*  1950 */   210,  210,  210,  199,  210,  210,  180,  210,  175,  198,
 /*  1960 */    93,  171,   69,  153,  158,  164,  163,  162,   72,  160,
 /*  1970 */   161,  195,   68,   66,  185,  184,  186,  190,  210,  210,
 /*  1980 */   210,  210,  210,  199,  210,  210,  180,  210,  175,  198,
 /*  1990 */   210,  116,  171,   69,  153,  158,  164,  163,  162,   72,
 /*  2000 */   160,  161,  195,   68,   66,  185,  184,  186,  190,  210,
 /*  2010 */   210,  210,  210,  210,  199,  210,  210,  180,  210,  175,
 /*  2020 */   198,  114,  171,   69,  153,  158,  164,  163,  162,   72,
 /*  2030 */   160,  161,  195,   68,   66,  185,  184,  186,  190,  210,
 /*  2040 */   210,  210,  210,  210,  199,  210,  210,  180,  210,  175,
 /*  2050 */   198,   77,  171,   69,  153,  158,  164,  163,  162,   72,
 /*  2060 */   160,  161,  195,   68,   66,  185,  184,  186,  190,  210,
 /*  2070 */   210,  210,  210,  210,  199,  210,  210,  180,  210,  175,
 /*  2080 */   198,  210,  112,  171,   69,  153,  158,  164,  163,  162,
 /*  2090 */    72,  160,  161,  195,   68,   66,  185,  184,  186,  190,
 /*  2100 */   210,  210,  210,  210,  210,  199,  210,  210,  180,  210,
 /*  2110 */   175,  198,  115,  171,   69,  153,  158,  164,  163,  162,
 /*  2120 */    72,  160,  161,  195,   68,   66,  185,  184,  186,  190,
 /*  2130 */   210,  210,  210,  210,  210,  199,  210,  210,  180,  210,
 /*  2140 */   175,  198,  123,  171,   69,  153,  158,  164,  163,  162,
 /*  2150 */    72,  160,  161,  195,   68,   66,  185,  184,  186,  190,
 /*  2160 */   210,  210,  210,  210,  210,  199,  210,  210,  180,  210,
 /*  2170 */   175,  198,  210,   80,  171,   69,  153,  158,  164,  163,
 /*  2180 */   162,   72,  160,  161,  195,   68,   66,  185,  184,  186,
 /*  2190 */   190,  210,  210,  210,  210,  210,  199,  210,  210,  180,
 /*  2200 */   210,  175,  198,  110,  171,   69,  153,  158,  164,  163,
 /*  2210 */   162,   72,  160,  161,  195,   68,   66,  185,  184,  186,
 /*  2220 */   190,  210,  210,  210,  210,  210,  199,  210,  210,  180,
 /*  2230 */   210,  175,  198,   95,  171,   69,  153,  158,  164,  163,
 /*  2240 */   162,   72,  160,  161,  195,   68,   66,  185,  184,  186,
 /*  2250 */   190,  210,  210,  210,  210,  210,  199,  210,  210,  180,
 /*  2260 */   210,  175,  198,  210,  111,  171,   69,  153,  158,  164,
 /*  2270 */   163,  162,   72,  160,  161,  195,   68,   66,  185,  184,
 /*  2280 */   186,  190,  210,  210,  210,  210,  210,  199,  210,  210,
 /*  2290 */   180,  210,  175,  198,   94,  171,   69,  153,  158,  164,
 /*  2300 */   163,  162,   72,  160,  161,  195,   68,   66,  185,  184,
 /*  2310 */   186,  190,  210,  210,  210,  210,  210,  199,  210,  210,
 /*  2320 */   180,  210,  175,  198,   92,  171,   69,  153,  158,  164,
 /*  2330 */   163,  162,   72,  160,  161,  195,   68,   66,  185,  184,
 /*  2340 */   186,  190,  210,  210,  210,  210,  210,  199,  210,  210,
 /*  2350 */   180,  210,  175,  198,  210,   88,  171,   69,  153,  158,
 /*  2360 */   164,  163,  162,   72,  160,  161,  195,   68,   66,  185,
 /*  2370 */   184,  186,  190,  210,  210,  210,  210,  210,  199,  210,
 /*  2380 */   210,  180,  210,  175,  198,   91,  171,   69,  153,  158,
 /*  2390 */   164,  163,  162,   72,  160,  161,  195,   68,   66,  185,
 /*  2400 */   184,  186,  190,  210,  210,  210,  210,  210,  199,  210,
 /*  2410 */   210,  180,  210,  175,  198,   96,  171,   69,  153,  158,
 /*  2420 */   164,  163,  162,   72,  160,  161,  195,   68,   66,  185,
 /*  2430 */   184,  186,  190,  210,  210,  210,  210,  210,  199,  210,
 /*  2440 */   210,  180,  210,  175,  198,  210,   78,  171,   69,  153,
 /*  2450 */   158,  164,  163,  162,   72,  160,  161,  195,   68,   66,
 /*  2460 */   185,  184,  186,  190,  210,  210,  210,  210,  210,  199,
 /*  2470 */   210,  210,  180,  210,  175,  198,   82,  171,   69,  153,
 /*  2480 */   158,  164,  163,  162,   72,  160,  161,  195,   68,   66,
 /*  2490 */   185,  184,  186,  190,  210,  210,  210,  210,  210,  199,
 /*  2500 */   210,  210,  180,  210,  175,  198,  125,  171,   69,  153,
 /*  2510 */   158,  164,  163,  162,   72,  160,  161,  195,   68,   66,
 /*  2520 */   185,  184,  186,  190,  210,  210,  210,  210,  210,  199,
 /*  2530 */   210,  210,  180,  210,  175,  198,  210,  121,  171,   69,
 /*  2540 */   153,  158,  164,  163,  162,   72,  160,  161,  195,   68,
 /*  2550 */    66,  185,  184,  186,  190,  210,  210,  210,  210,  210,
 /*  2560 */   199,  210,  210,  180,  210,  175,  198,   85,  171,   69,
 /*  2570 */   153,  158,  164,  163,  162,   72,  160,  161,  195,   68,
 /*  2580 */    66,  185,  184,  186,  190,  210,  210,  210,  210,  210,
 /*  2590 */   199,  210,  210,  180,  210,  175,  198,   89,  171,   69,
 /*  2600 */   153,  158,  164,  163,  162,   72,  160,  161,  195,   68,
 /*  2610 */    66,  185,  184,  186,  190,  210,  210,  210,  210,  210,
 /*  2620 */   199,  210,  210,  180,  210,  175,  198,  210,  129,  171,
 /*  2630 */    69,  153,  158,  164,  163,  162,   72,  160,  161,  195,
 /*  2640 */    68,   66,  185,  184,  186,  190,  210,  210,  210,  210,
 /*  2650 */   210,  199,  210,  210,  180,  210,  175,  198,   97,  171,
 /*  2660 */    69,  153,  158,  164,  163,  162,   72,  160,  161,  195,
 /*  2670 */    68,   66,  185,  184,  186,  190,  210,  210,  210,  210,
 /*  2680 */   210,  199,  210,  210,  180,  210,  175,  198,    6,    9,
 /*  2690 */    35,   31,   14,   15,   17,   11,   34,   33,  210,  210,
 /*  2700 */   210,   49,   51,   54,   13,   48,   38,   46,  210,   42,
 /*  2710 */   210,  210,  210,  210,  210,   28,   22,   20,   35,   31,
 /*  2720 */    14,   15,   17,   11,   34,   33,  210,  210,  210,   49,
 /*  2730 */    51,   54,   13,   48,   38,   46,  210,   42,   23,  170,
 /*  2740 */   169,  210,   74,   28,   22,   20,  135,   29,  168,  139,
 /*  2750 */   137,  210,  210,   26,  210,   56,   57,  210,  210,  210,
 /*  2760 */   210,   25,  178,   60,  210,   53,  192,  188,  189,   70,
 /*  2770 */   187,  181,  183,    2,  135,  210,  146,  137,  210,  210,
 /*  2780 */   149,   26,  210,   56,   57,  210,  210,  210,  210,   25,
 /*  2790 */   210,  210,  210,   53,  192,  188,  189,   70,  187,  181,
 /*  2800 */   183,    2,  193,  210,  146,  137,  210,  210,  149,  210,
 /*  2810 */    14,   15,   17,   11,   34,   33,  210,  210,  210,   49,
 /*  2820 */    51,   54,   13,   48,   38,   46,  210,   42,  210,  135,
 /*  2830 */   210,  210,  210,   28,   22,   20,   26,  210,   56,   57,
 /*  2840 */   210,  210,  210,  210,   25,  210,  210,  210,   53,  192,
 /*  2850 */   188,  189,   70,  187,  181,  183,    2,  210,  210,  146,
 /*  2860 */   137,  210,  210,  149,  210,   34,   33,  210,  210,  210,
 /*  2870 */    49,   51,   54,   13,   48,   38,   46,  210,   42,  210,
 /*  2880 */   210,  210,  210,  210,   28,   22,   20,  210,  210,   49,
 /*  2890 */    51,   54,   13,   48,   38,   46,  210,   42,  210,  210,
 /*  2900 */   210,  210,  210,   28,   22,   20,
    );
    static public $yy_lookahead = array(
 /*     0 */     1,    2,    3,    4,    5,    6,    7,    8,    9,   10,
 /*    10 */    11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
 /*    20 */    21,   39,   40,   41,   25,   26,   27,   28,   29,   30,
 /*    30 */    31,   32,   33,   84,   85,   66,   84,   85,   39,   40,
 /*    40 */    41,   72,   73,   74,   75,   76,   77,   78,   86,   56,
 /*    50 */    88,   84,   85,   91,   92,   56,   60,    1,    2,    3,
 /*    60 */     4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
 /*    70 */    14,   15,   16,   17,   18,   19,   20,   21,   50,   60,
 /*    80 */    58,   25,   26,   27,   28,   29,   30,   31,   86,   33,
 /*    90 */    88,   43,   50,   91,   92,   39,   40,   41,   43,   43,
 /*   100 */    43,    1,    2,    3,    4,    5,    6,    7,    8,    9,
 /*   110 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*   120 */    20,   21,   50,   50,   60,   25,   26,   27,   28,   29,
 /*   130 */    30,   31,   55,   33,   42,   51,   89,   59,   38,   39,
 /*   140 */    40,   41,    1,    2,    3,    4,    5,    6,    7,    8,
 /*   150 */     9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
 /*   160 */    19,   20,   21,   60,   89,   54,   25,   26,   27,   28,
 /*   170 */    29,   30,   31,   32,   33,   89,   95,   89,   60,   50,
 /*   180 */    39,   40,   41,    1,    2,    3,    4,    5,    6,    7,
 /*   190 */     8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*   200 */    18,   19,   20,   21,   95,   42,   60,   25,   26,   27,
 /*   210 */    28,   29,   30,   31,   50,   33,   60,   96,   96,   96,
 /*   220 */    38,   39,   40,   41,    1,    2,    3,    4,    5,    6,
 /*   230 */     7,    8,    9,   10,   11,   12,   13,   14,   15,   16,
 /*   240 */    17,   18,   19,   20,   21,   96,   96,   96,   25,   26,
 /*   250 */    27,   28,   29,   30,   31,   96,   33,   96,   96,   96,
 /*   260 */    96,   38,   39,   40,   41,    1,    2,    3,    4,    5,
 /*   270 */     6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
 /*   280 */    16,   17,   18,   19,   20,   21,   96,   96,   96,   25,
 /*   290 */    26,   27,   28,   29,   30,   31,   86,   33,   88,   42,
 /*   300 */    66,   91,   92,   39,   40,   41,   72,   73,   74,   75,
 /*   310 */    76,   77,   78,   86,   96,   88,   96,   60,   91,   92,
 /*   320 */    56,   96,    1,    2,    3,    4,    5,    6,    7,    8,
 /*   330 */     9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
 /*   340 */    19,   20,   21,   96,   96,   96,   25,   26,   27,   28,
 /*   350 */    29,   30,   31,   86,   33,   88,   96,   96,   91,   92,
 /*   360 */    39,   40,   41,   96,   43,   96,    1,    2,    3,    4,
 /*   370 */     5,    6,    7,    8,    9,   10,   11,   12,   13,   14,
 /*   380 */    15,   16,   17,   18,   19,   20,   21,   96,   96,   96,
 /*   390 */    25,   26,   27,   28,   29,   30,   31,   96,   33,   29,
 /*   400 */    30,   31,   96,   33,   39,   40,   41,   33,   96,   39,
 /*   410 */    40,   41,   96,   39,   40,   41,   96,   96,   96,   96,
 /*   420 */    55,   96,    1,    2,    3,    4,    5,    6,    7,    8,
 /*   430 */     9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
 /*   440 */    19,   20,   21,   96,   96,   96,   25,   26,   27,   28,
 /*   450 */    29,   30,   31,   86,   33,   88,   96,   96,   91,   92,
 /*   460 */    39,   40,   41,    1,    2,    3,    4,    5,    6,    7,
 /*   470 */     8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*   480 */    18,   19,   20,   21,   96,   96,   96,   25,   26,   27,
 /*   490 */    28,   29,   30,   31,   86,   33,   88,   96,   96,   91,
 /*   500 */    92,   39,   40,   41,    1,    2,    3,    4,    5,    6,
 /*   510 */     7,    8,    9,   10,   11,   12,   13,   14,   15,   16,
 /*   520 */    17,   18,   19,   20,   21,   96,   96,   96,   25,   26,
 /*   530 */    27,   28,   29,   30,   31,   86,   33,   88,   96,   96,
 /*   540 */    91,   92,   39,   40,   41,    1,    2,    3,    4,    5,
 /*   550 */     6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
 /*   560 */    16,   17,   18,   19,   20,   21,   96,   96,   96,   25,
 /*   570 */    26,   27,   28,   29,   30,   31,   96,   33,   96,   96,
 /*   580 */    96,   96,   96,   39,   40,   41,    1,    2,    3,    4,
 /*   590 */     5,    6,    7,    8,    9,   10,   11,   12,   13,   14,
 /*   600 */    15,   16,   17,   18,   19,   20,   21,   96,   96,   96,
 /*   610 */    25,   26,   27,   28,   29,   30,   31,   96,   33,   96,
 /*   620 */    96,   96,   96,   96,   39,   40,   41,    1,    2,    3,
 /*   630 */     4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
 /*   640 */    14,   15,   16,   17,   18,   19,   20,   21,   96,   96,
 /*   650 */    96,   25,   26,   27,   28,   29,   30,   31,   96,   33,
 /*   660 */    96,   96,   96,   96,   96,   39,   40,   41,    1,    2,
 /*   670 */     3,    4,    5,    6,    7,    8,    9,   10,   11,   12,
 /*   680 */    13,   14,   15,   16,   17,   18,   19,   20,   21,   96,
 /*   690 */    96,   96,   25,   26,   27,   28,   29,   30,   31,   96,
 /*   700 */    33,   96,   96,   96,   96,   96,   39,   40,   41,    1,
 /*   710 */     2,    3,    4,    5,    6,    7,    8,    9,   10,   11,
 /*   720 */    12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
 /*   730 */    96,   96,   96,   25,   26,   27,   28,   29,   30,   31,
 /*   740 */    96,   33,   96,   96,   96,   96,   96,   39,   40,   41,
 /*   750 */     1,    2,    3,    4,    5,    6,    7,    8,    9,   10,
 /*   760 */    11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
 /*   770 */    21,   96,   96,   96,   25,   26,   27,   28,   29,   30,
 /*   780 */    31,   96,   33,   96,   96,   96,   96,   96,   39,   40,
 /*   790 */    41,    1,    2,    3,    4,    5,    6,    7,    8,    9,
 /*   800 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*   810 */    20,   21,   96,   96,   96,   25,   26,   27,   28,   29,
 /*   820 */    30,   31,   96,   33,   96,   96,   96,   96,   96,   39,
 /*   830 */    40,   41,    2,    3,    4,    5,    6,    7,    8,    9,
 /*   840 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*   850 */    20,   21,   96,   96,   96,   25,   26,   27,   28,   29,
 /*   860 */    30,   31,   96,   33,   96,   96,   96,   96,   96,   39,
 /*   870 */    40,   41,   96,    3,    4,    5,    6,    7,    8,    9,
 /*   880 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*   890 */    20,   21,   96,   96,   96,   25,   26,   27,   28,   29,
 /*   900 */    30,   31,   96,   33,   42,   96,   96,   96,   96,   39,
 /*   910 */    40,   41,   50,   51,    4,    5,    6,    7,    8,    9,
 /*   920 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
 /*   930 */    20,   21,   96,   96,   96,   25,   26,   27,   28,   29,
 /*   940 */    30,   31,   96,   33,   96,   96,   96,   96,   96,   39,
 /*   950 */    40,   41,    8,    9,   10,   11,   12,   13,   14,   15,
 /*   960 */    16,   17,   18,   19,   20,   21,   96,   96,   96,   25,
 /*   970 */    26,   27,   28,   29,   30,   31,   96,   33,   96,   96,
 /*   980 */    96,   96,   96,   39,   40,   41,   64,   65,   66,   67,
 /*   990 */    68,   69,   70,   71,   72,   73,   74,   75,   76,   77,
 /*  1000 */    78,   79,   80,   81,   82,   83,   96,   96,   96,   87,
 /*  1010 */    96,   96,   90,   96,   92,   93,   94,   64,   65,   66,
 /*  1020 */    67,   68,   69,   70,   71,   72,   73,   74,   75,   76,
 /*  1030 */    77,   78,   79,   80,   81,   82,   83,   96,   96,   96,
 /*  1040 */    87,   96,   96,   90,   96,   92,   93,   96,   64,   65,
 /*  1050 */    66,   67,   68,   69,   70,   71,   72,   73,   74,   75,
 /*  1060 */    76,   77,   78,   79,   80,   81,   82,   83,   96,   96,
 /*  1070 */    96,   87,   96,   96,   90,   96,   92,   93,   96,   64,
 /*  1080 */    65,   66,   67,   68,   69,   70,   71,   72,   73,   74,
 /*  1090 */    75,   76,   77,   78,   79,   80,   81,   96,   96,   96,
 /*  1100 */    96,   96,   87,   96,   96,   90,   96,   92,   93,   94,
 /*  1110 */    63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
 /*  1120 */    73,   74,   75,   76,   77,   78,   79,   80,   81,   96,
 /*  1130 */    96,   96,   96,   96,   87,   96,   96,   90,   96,   92,
 /*  1140 */    93,   64,   65,   66,   67,   68,   69,   70,   71,   72,
 /*  1150 */    73,   74,   75,   76,   77,   78,   79,   80,   81,   96,
 /*  1160 */    96,   96,   96,   96,   87,   96,   96,   90,   96,   92,
 /*  1170 */    93,   94,   64,   65,   66,   67,   68,   69,   70,   71,
 /*  1180 */    72,   73,   74,   75,   76,   77,   78,   79,   80,   81,
 /*  1190 */    96,   96,   96,   96,   96,   87,   96,   96,   90,   96,
 /*  1200 */    92,   93,   64,   65,   66,   67,   68,   69,   70,   71,
 /*  1210 */    72,   73,   74,   75,   76,   77,   78,   79,   80,   81,
 /*  1220 */    96,   96,   96,   96,   96,   87,   96,   96,   90,   96,
 /*  1230 */    92,   93,   64,   65,   66,   67,   68,   69,   70,   71,
 /*  1240 */    72,   73,   74,   75,   76,   77,   78,   79,   80,   81,
 /*  1250 */    96,   96,   96,   96,   96,   87,   96,   96,   90,   96,
 /*  1260 */    92,   93,   96,   64,   65,   66,   67,   68,   69,   70,
 /*  1270 */    71,   72,   73,   74,   75,   76,   77,   78,   79,   80,
 /*  1280 */    81,   96,   96,   96,   96,   96,   87,   96,   96,   90,
 /*  1290 */    96,   92,   93,   64,   65,   66,   67,   68,   69,   70,
 /*  1300 */    71,   72,   73,   74,   75,   76,   77,   78,   79,   80,
 /*  1310 */    81,   96,   96,   96,   96,   96,   87,   96,   96,   90,
 /*  1320 */    96,   92,   93,   64,   65,   66,   67,   68,   69,   70,
 /*  1330 */    71,   72,   73,   74,   75,   76,   77,   78,   79,   80,
 /*  1340 */    81,   96,   96,   96,   96,   96,   87,   96,   96,   90,
 /*  1350 */    96,   92,   93,   96,   64,   65,   66,   67,   68,   69,
 /*  1360 */    70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
 /*  1370 */    80,   81,   96,   96,   96,   96,   96,   87,   96,   96,
 /*  1380 */    90,   96,   92,   93,   64,   65,   66,   67,   68,   69,
 /*  1390 */    70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
 /*  1400 */    80,   81,   96,   96,   96,   96,   96,   87,   96,   96,
 /*  1410 */    90,   96,   92,   93,   64,   65,   66,   67,   68,   69,
 /*  1420 */    70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
 /*  1430 */    80,   81,   96,   96,   96,   96,   96,   87,   96,   96,
 /*  1440 */    90,   96,   92,   93,   96,   64,   65,   66,   67,   68,
 /*  1450 */    69,   70,   71,   72,   73,   74,   75,   76,   77,   78,
 /*  1460 */    79,   80,   81,   96,   96,   96,   96,   96,   87,   96,
 /*  1470 */    96,   90,   96,   92,   93,   64,   65,   66,   67,   68,
 /*  1480 */    69,   70,   71,   72,   73,   74,   75,   76,   77,   78,
 /*  1490 */    79,   80,   81,   96,   96,   96,   96,   96,   87,   96,
 /*  1500 */    96,   90,   96,   92,   93,   64,   65,   66,   67,   68,
 /*  1510 */    69,   70,   71,   72,   73,   74,   75,   76,   77,   78,
 /*  1520 */    79,   80,   81,   96,   96,   96,   96,   96,   87,   96,
 /*  1530 */    96,   90,   96,   92,   93,   96,   64,   65,   66,   67,
 /*  1540 */    68,   69,   70,   71,   72,   73,   74,   75,   76,   77,
 /*  1550 */    78,   79,   80,   81,   96,   96,   96,   96,   96,   87,
 /*  1560 */    96,   96,   90,   96,   92,   93,   64,   65,   66,   67,
 /*  1570 */    68,   69,   70,   71,   72,   73,   74,   75,   76,   77,
 /*  1580 */    78,   79,   80,   81,   96,   96,   96,   96,   96,   87,
 /*  1590 */    96,   96,   90,   96,   92,   93,   64,   65,   66,   67,
 /*  1600 */    68,   69,   70,   71,   72,   73,   74,   75,   76,   77,
 /*  1610 */    78,   79,   80,   81,   96,   96,   96,   96,   96,   87,
 /*  1620 */    96,   96,   90,   96,   92,   93,   96,   64,   65,   66,
 /*  1630 */    67,   68,   69,   70,   71,   72,   73,   74,   75,   76,
 /*  1640 */    77,   78,   79,   80,   81,   96,   96,   96,   96,   96,
 /*  1650 */    87,   96,   96,   90,   96,   92,   93,   64,   65,   66,
 /*  1660 */    67,   68,   69,   70,   71,   72,   73,   74,   75,   76,
 /*  1670 */    77,   78,   79,   80,   81,   96,   96,   96,   96,   96,
 /*  1680 */    87,   96,   96,   90,   96,   92,   93,   64,   65,   66,
 /*  1690 */    67,   68,   69,   70,   71,   72,   73,   74,   75,   76,
 /*  1700 */    77,   78,   79,   80,   81,   96,   96,   96,   96,   96,
 /*  1710 */    87,   96,   96,   90,   96,   92,   93,   96,   64,   65,
 /*  1720 */    66,   67,   68,   69,   70,   71,   72,   73,   74,   75,
 /*  1730 */    76,   77,   78,   79,   80,   81,   96,   96,   96,   96,
 /*  1740 */    96,   87,   96,   96,   90,   96,   92,   93,   64,   65,
 /*  1750 */    66,   67,   68,   69,   70,   71,   72,   73,   74,   75,
 /*  1760 */    76,   77,   78,   79,   80,   81,   96,   96,   96,   96,
 /*  1770 */    96,   87,   96,   96,   90,   96,   92,   93,   64,   65,
 /*  1780 */    66,   67,   68,   69,   70,   71,   72,   73,   74,   75,
 /*  1790 */    76,   77,   78,   79,   80,   81,   96,   96,   96,   96,
 /*  1800 */    96,   87,   96,   96,   90,   96,   92,   93,   96,   64,
 /*  1810 */    65,   66,   67,   68,   69,   70,   71,   72,   73,   74,
 /*  1820 */    75,   76,   77,   78,   79,   80,   81,   96,   96,   96,
 /*  1830 */    96,   96,   87,   96,   96,   90,   96,   92,   93,   64,
 /*  1840 */    65,   66,   67,   68,   69,   70,   71,   72,   73,   74,
 /*  1850 */    75,   76,   77,   78,   79,   80,   81,   96,   96,   96,
 /*  1860 */    96,   96,   87,   96,   96,   90,   96,   92,   93,   64,
 /*  1870 */    65,   66,   67,   68,   69,   70,   71,   72,   73,   74,
 /*  1880 */    75,   76,   77,   78,   79,   80,   81,   96,   96,   96,
 /*  1890 */    96,   96,   87,   96,   96,   90,   96,   92,   93,   96,
 /*  1900 */    64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
 /*  1910 */    74,   75,   76,   77,   78,   79,   80,   81,   96,   96,
 /*  1920 */    96,   96,   96,   87,   96,   96,   90,   96,   92,   93,
 /*  1930 */    64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
 /*  1940 */    74,   75,   76,   77,   78,   79,   80,   81,   96,   96,
 /*  1950 */    96,   96,   96,   87,   96,   96,   90,   96,   92,   93,
 /*  1960 */    64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
 /*  1970 */    74,   75,   76,   77,   78,   79,   80,   81,   96,   96,
 /*  1980 */    96,   96,   96,   87,   96,   96,   90,   96,   92,   93,
 /*  1990 */    96,   64,   65,   66,   67,   68,   69,   70,   71,   72,
 /*  2000 */    73,   74,   75,   76,   77,   78,   79,   80,   81,   96,
 /*  2010 */    96,   96,   96,   96,   87,   96,   96,   90,   96,   92,
 /*  2020 */    93,   64,   65,   66,   67,   68,   69,   70,   71,   72,
 /*  2030 */    73,   74,   75,   76,   77,   78,   79,   80,   81,   96,
 /*  2040 */    96,   96,   96,   96,   87,   96,   96,   90,   96,   92,
 /*  2050 */    93,   64,   65,   66,   67,   68,   69,   70,   71,   72,
 /*  2060 */    73,   74,   75,   76,   77,   78,   79,   80,   81,   96,
 /*  2070 */    96,   96,   96,   96,   87,   96,   96,   90,   96,   92,
 /*  2080 */    93,   96,   64,   65,   66,   67,   68,   69,   70,   71,
 /*  2090 */    72,   73,   74,   75,   76,   77,   78,   79,   80,   81,
 /*  2100 */    96,   96,   96,   96,   96,   87,   96,   96,   90,   96,
 /*  2110 */    92,   93,   64,   65,   66,   67,   68,   69,   70,   71,
 /*  2120 */    72,   73,   74,   75,   76,   77,   78,   79,   80,   81,
 /*  2130 */    96,   96,   96,   96,   96,   87,   96,   96,   90,   96,
 /*  2140 */    92,   93,   64,   65,   66,   67,   68,   69,   70,   71,
 /*  2150 */    72,   73,   74,   75,   76,   77,   78,   79,   80,   81,
 /*  2160 */    96,   96,   96,   96,   96,   87,   96,   96,   90,   96,
 /*  2170 */    92,   93,   96,   64,   65,   66,   67,   68,   69,   70,
 /*  2180 */    71,   72,   73,   74,   75,   76,   77,   78,   79,   80,
 /*  2190 */    81,   96,   96,   96,   96,   96,   87,   96,   96,   90,
 /*  2200 */    96,   92,   93,   64,   65,   66,   67,   68,   69,   70,
 /*  2210 */    71,   72,   73,   74,   75,   76,   77,   78,   79,   80,
 /*  2220 */    81,   96,   96,   96,   96,   96,   87,   96,   96,   90,
 /*  2230 */    96,   92,   93,   64,   65,   66,   67,   68,   69,   70,
 /*  2240 */    71,   72,   73,   74,   75,   76,   77,   78,   79,   80,
 /*  2250 */    81,   96,   96,   96,   96,   96,   87,   96,   96,   90,
 /*  2260 */    96,   92,   93,   96,   64,   65,   66,   67,   68,   69,
 /*  2270 */    70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
 /*  2280 */    80,   81,   96,   96,   96,   96,   96,   87,   96,   96,
 /*  2290 */    90,   96,   92,   93,   64,   65,   66,   67,   68,   69,
 /*  2300 */    70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
 /*  2310 */    80,   81,   96,   96,   96,   96,   96,   87,   96,   96,
 /*  2320 */    90,   96,   92,   93,   64,   65,   66,   67,   68,   69,
 /*  2330 */    70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
 /*  2340 */    80,   81,   96,   96,   96,   96,   96,   87,   96,   96,
 /*  2350 */    90,   96,   92,   93,   96,   64,   65,   66,   67,   68,
 /*  2360 */    69,   70,   71,   72,   73,   74,   75,   76,   77,   78,
 /*  2370 */    79,   80,   81,   96,   96,   96,   96,   96,   87,   96,
 /*  2380 */    96,   90,   96,   92,   93,   64,   65,   66,   67,   68,
 /*  2390 */    69,   70,   71,   72,   73,   74,   75,   76,   77,   78,
 /*  2400 */    79,   80,   81,   96,   96,   96,   96,   96,   87,   96,
 /*  2410 */    96,   90,   96,   92,   93,   64,   65,   66,   67,   68,
 /*  2420 */    69,   70,   71,   72,   73,   74,   75,   76,   77,   78,
 /*  2430 */    79,   80,   81,   96,   96,   96,   96,   96,   87,   96,
 /*  2440 */    96,   90,   96,   92,   93,   96,   64,   65,   66,   67,
 /*  2450 */    68,   69,   70,   71,   72,   73,   74,   75,   76,   77,
 /*  2460 */    78,   79,   80,   81,   96,   96,   96,   96,   96,   87,
 /*  2470 */    96,   96,   90,   96,   92,   93,   64,   65,   66,   67,
 /*  2480 */    68,   69,   70,   71,   72,   73,   74,   75,   76,   77,
 /*  2490 */    78,   79,   80,   81,   96,   96,   96,   96,   96,   87,
 /*  2500 */    96,   96,   90,   96,   92,   93,   64,   65,   66,   67,
 /*  2510 */    68,   69,   70,   71,   72,   73,   74,   75,   76,   77,
 /*  2520 */    78,   79,   80,   81,   96,   96,   96,   96,   96,   87,
 /*  2530 */    96,   96,   90,   96,   92,   93,   96,   64,   65,   66,
 /*  2540 */    67,   68,   69,   70,   71,   72,   73,   74,   75,   76,
 /*  2550 */    77,   78,   79,   80,   81,   96,   96,   96,   96,   96,
 /*  2560 */    87,   96,   96,   90,   96,   92,   93,   64,   65,   66,
 /*  2570 */    67,   68,   69,   70,   71,   72,   73,   74,   75,   76,
 /*  2580 */    77,   78,   79,   80,   81,   96,   96,   96,   96,   96,
 /*  2590 */    87,   96,   96,   90,   96,   92,   93,   64,   65,   66,
 /*  2600 */    67,   68,   69,   70,   71,   72,   73,   74,   75,   76,
 /*  2610 */    77,   78,   79,   80,   81,   96,   96,   96,   96,   96,
 /*  2620 */    87,   96,   96,   90,   96,   92,   93,   96,   64,   65,
 /*  2630 */    66,   67,   68,   69,   70,   71,   72,   73,   74,   75,
 /*  2640 */    76,   77,   78,   79,   80,   81,   96,   96,   96,   96,
 /*  2650 */    96,   87,   96,   96,   90,   96,   92,   93,   64,   65,
 /*  2660 */    66,   67,   68,   69,   70,   71,   72,   73,   74,   75,
 /*  2670 */    76,   77,   78,   79,   80,   81,   96,   96,   96,   96,
 /*  2680 */    96,   87,   96,   96,   90,   96,   92,   93,   12,   13,
 /*  2690 */    14,   15,   16,   17,   18,   19,   20,   21,   96,   96,
 /*  2700 */    96,   25,   26,   27,   28,   29,   30,   31,   96,   33,
 /*  2710 */    96,   96,   96,   96,   96,   39,   40,   41,   14,   15,
 /*  2720 */    16,   17,   18,   19,   20,   21,   96,   96,   96,   25,
 /*  2730 */    26,   27,   28,   29,   30,   31,   96,   33,   35,   36,
 /*  2740 */    37,   96,   50,   39,   40,   41,   27,   44,   45,   57,
 /*  2750 */    58,   96,   96,   34,   96,   36,   37,   96,   96,   96,
 /*  2760 */    96,   42,   43,   60,   96,   46,   47,   48,   49,   50,
 /*  2770 */    51,   52,   53,   54,   27,   96,   57,   58,   96,   96,
 /*  2780 */    61,   34,   96,   36,   37,   96,   96,   96,   96,   42,
 /*  2790 */    96,   96,   96,   46,   47,   48,   49,   50,   51,   52,
 /*  2800 */    53,   54,   55,   96,   57,   58,   96,   96,   61,   96,
 /*  2810 */    16,   17,   18,   19,   20,   21,   96,   96,   96,   25,
 /*  2820 */    26,   27,   28,   29,   30,   31,   96,   33,   96,   27,
 /*  2830 */    96,   96,   96,   39,   40,   41,   34,   96,   36,   37,
 /*  2840 */    96,   96,   96,   96,   42,   96,   96,   96,   46,   47,
 /*  2850 */    48,   49,   50,   51,   52,   53,   54,   96,   96,   57,
 /*  2860 */    58,   96,   96,   61,   96,   20,   21,   96,   96,   96,
 /*  2870 */    25,   26,   27,   28,   29,   30,   31,   96,   33,   96,
 /*  2880 */    96,   96,   96,   96,   39,   40,   41,   96,   96,   25,
 /*  2890 */    26,   27,   28,   29,   30,   31,   96,   33,   96,   96,
 /*  2900 */    96,   96,   96,   39,   40,   41,
);
    const YY_SHIFT_USE_DFLT = -19;
    const YY_SHIFT_MAX = 152;
    static public $yy_shift_ofst = array(
 /*     0 */  2802, 2719, 2747, 2802, 2802, 2802, 2802, 2802, 2802, 2802,
 /*    10 */  2802, 2802, 2802, 2802, 2802, 2802, 2802, 2802, 2802, 2802,
 /*    20 */  2802, 2802, 2802, 2802, 2802, 2802, 2802, 2802, 2802, 2802,
 /*    30 */  2802, 2802, 2802, 2802, 2802, 2802, 2802, 2802, 2802, 2802,
 /*    40 */  2802, 2802, 2802, 2802, 2802, 2802, 2802, 2802, 2802, 2802,
 /*    50 */  2802, 2802, 2802, 2802, 2802, 2802, 2692, 2692,  129,  129,
 /*    60 */   129,  129,  129,  129,  129,  129,   78,   78,   78, 2703,
 /*    70 */   257,  103,  111,  103,  118,  111,   -1,  100,   56,  141,
 /*    80 */   365,  321,  182,  264,  223,  421,  421,  421,  421,  626,
 /*    90 */   585,  421,  462,  708,  503,  544,  667,  749,  790,  830,
 /*   100 */   870,  910,  944,  944,  944,  944, 2676, 2676, 2676, 2676,
 /*   110 */  2704, 2704, 2794, 2794, 2845, 2845, 2845, 2845, 2864, 2864,
 /*   120 */   370,  370,  370,  370,  374,  374,  374,  374,  374,  -18,
 /*   130 */   862,   -7,   -4,   -4,   19,   84,   77,   72,   -4,   42,
 /*   140 */    57,   64,   55,   48,   92,   22,   73,   -4,   28,  164,
 /*   150 */   146,  163,  156,
);
    const YY_REDUCE_USE_DFLT = -52;
    const YY_REDUCE_MAX = 75;
    static public $yy_reduce_ofst = array(
 /*     0 */  1047,  922,  953,  984, 1015, 1077, 2169, 2139, 2200, 2230,
 /*    10 */  2291, 2260, 2109, 2078, 1927, 1896, 1957, 1987, 2048, 2018,
 /*    20 */  2351, 2321, 2412, 2564, 2594, 2382, 2442, 1866, 2533, 2503,
 /*    30 */  1623, 1229, 1199, 1259, 1168, 1320, 1108, 1138, 1290, 1836,
 /*    40 */  1381, 1745, 1805, 1593, 1441, 1502, 1563, 1532, 1654, 1714,
 /*    50 */  1350, 2473, 1472, 1684, 1411, 1775,  234,  -31,  449,    2,
 /*    60 */   227,  267,  367,  408,  210,  -38,  -33,  -51,  -48,   75,
 /*    70 */    47,   86,  109,   86,   88,   81,
);
    static public $yyExpectedTokens = array(
        /* 0 */ array(27, 34, 36, 37, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 61, ),
        /* 1 */ array(27, 34, 36, 37, 42, 43, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 61, ),
        /* 2 */ array(27, 34, 36, 37, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 61, ),
        /* 3 */ array(27, 34, 36, 37, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 61, ),
        /* 4 */ array(27, 34, 36, 37, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 61, ),
        /* 5 */ array(27, 34, 36, 37, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 61, ),
        /* 6 */ array(27, 34, 36, 37, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 61, ),
        /* 7 */ array(27, 34, 36, 37, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 61, ),
        /* 8 */ array(27, 34, 36, 37, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 61, ),
        /* 9 */ array(27, 34, 36, 37, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 61, ),
        /* 10 */ array(27, 34, 36, 37, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 61, ),
        /* 11 */ array(27, 34, 36, 37, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 61, ),
        /* 12 */ array(27, 34, 36, 37, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 61, ),
        /* 13 */ array(27, 34, 36, 37, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 61, ),
        /* 14 */ array(27, 34, 36, 37, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 61, ),
        /* 15 */ array(27, 34, 36, 37, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 61, ),
        /* 16 */ array(27, 34, 36, 37, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 61, ),
        /* 17 */ array(27, 34, 36, 37, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 61, ),
        /* 18 */ array(27, 34, 36, 37, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 61, ),
        /* 19 */ array(27, 34, 36, 37, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 61, ),
        /* 20 */ array(27, 34, 36, 37, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 61, ),
        /* 21 */ array(27, 34, 36, 37, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 61, ),
        /* 22 */ array(27, 34, 36, 37, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 61, ),
        /* 23 */ array(27, 34, 36, 37, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 61, ),
        /* 24 */ array(27, 34, 36, 37, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 61, ),
        /* 25 */ array(27, 34, 36, 37, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 61, ),
        /* 26 */ array(27, 34, 36, 37, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 61, ),
        /* 27 */ array(27, 34, 36, 37, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 61, ),
        /* 28 */ array(27, 34, 36, 37, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 61, ),
        /* 29 */ array(27, 34, 36, 37, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 61, ),
        /* 30 */ array(27, 34, 36, 37, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 61, ),
        /* 31 */ array(27, 34, 36, 37, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 61, ),
        /* 32 */ array(27, 34, 36, 37, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 61, ),
        /* 33 */ array(27, 34, 36, 37, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 61, ),
        /* 34 */ array(27, 34, 36, 37, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 61, ),
        /* 35 */ array(27, 34, 36, 37, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 61, ),
        /* 36 */ array(27, 34, 36, 37, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 61, ),
        /* 37 */ array(27, 34, 36, 37, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 61, ),
        /* 38 */ array(27, 34, 36, 37, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 61, ),
        /* 39 */ array(27, 34, 36, 37, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 61, ),
        /* 40 */ array(27, 34, 36, 37, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 61, ),
        /* 41 */ array(27, 34, 36, 37, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 61, ),
        /* 42 */ array(27, 34, 36, 37, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 61, ),
        /* 43 */ array(27, 34, 36, 37, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 61, ),
        /* 44 */ array(27, 34, 36, 37, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 61, ),
        /* 45 */ array(27, 34, 36, 37, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 61, ),
        /* 46 */ array(27, 34, 36, 37, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 61, ),
        /* 47 */ array(27, 34, 36, 37, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 61, ),
        /* 48 */ array(27, 34, 36, 37, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 61, ),
        /* 49 */ array(27, 34, 36, 37, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 61, ),
        /* 50 */ array(27, 34, 36, 37, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 61, ),
        /* 51 */ array(27, 34, 36, 37, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 61, ),
        /* 52 */ array(27, 34, 36, 37, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 61, ),
        /* 53 */ array(27, 34, 36, 37, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 61, ),
        /* 54 */ array(27, 34, 36, 37, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 61, ),
        /* 55 */ array(27, 34, 36, 37, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 61, ),
        /* 56 */ array(50, 57, 58, ),
        /* 57 */ array(50, 57, 58, ),
        /* 58 */ array(50, ),
        /* 59 */ array(50, ),
        /* 60 */ array(50, ),
        /* 61 */ array(50, ),
        /* 62 */ array(50, ),
        /* 63 */ array(50, ),
        /* 64 */ array(50, ),
        /* 65 */ array(50, ),
        /* 66 */ array(59, ),
        /* 67 */ array(59, ),
        /* 68 */ array(59, ),
        /* 69 */ array(35, 36, 37, 44, 45, 60, ),
        /* 70 */ array(42, 60, ),
        /* 71 */ array(60, ),
        /* 72 */ array(54, ),
        /* 73 */ array(60, ),
        /* 74 */ array(60, ),
        /* 75 */ array(54, ),
        /* 76 */ array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 39, 40, 41, 56, ),
        /* 77 */ array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 26, 27, 28, 29, 30, 31, 33, 38, 39, 40, 41, ),
        /* 78 */ array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 26, 27, 28, 29, 30, 31, 33, 39, 40, 41, 43, ),
        /* 79 */ array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 26, 27, 28, 29, 30, 31, 32, 33, 39, 40, 41, ),
        /* 80 */ array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 26, 27, 28, 29, 30, 31, 33, 39, 40, 41, 55, ),
        /* 81 */ array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 26, 27, 28, 29, 30, 31, 33, 39, 40, 41, 43, ),
        /* 82 */ array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 26, 27, 28, 29, 30, 31, 33, 38, 39, 40, 41, ),
        /* 83 */ array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 26, 27, 28, 29, 30, 31, 33, 39, 40, 41, 56, ),
        /* 84 */ array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 26, 27, 28, 29, 30, 31, 33, 38, 39, 40, 41, ),
        /* 85 */ array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 26, 27, 28, 29, 30, 31, 33, 39, 40, 41, ),
        /* 86 */ array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 26, 27, 28, 29, 30, 31, 33, 39, 40, 41, ),
        /* 87 */ array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 26, 27, 28, 29, 30, 31, 33, 39, 40, 41, ),
        /* 88 */ array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 26, 27, 28, 29, 30, 31, 33, 39, 40, 41, ),
        /* 89 */ array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 26, 27, 28, 29, 30, 31, 33, 39, 40, 41, ),
        /* 90 */ array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 26, 27, 28, 29, 30, 31, 33, 39, 40, 41, ),
        /* 91 */ array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 26, 27, 28, 29, 30, 31, 33, 39, 40, 41, ),
        /* 92 */ array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 26, 27, 28, 29, 30, 31, 33, 39, 40, 41, ),
        /* 93 */ array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 26, 27, 28, 29, 30, 31, 33, 39, 40, 41, ),
        /* 94 */ array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 26, 27, 28, 29, 30, 31, 33, 39, 40, 41, ),
        /* 95 */ array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 26, 27, 28, 29, 30, 31, 33, 39, 40, 41, ),
        /* 96 */ array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 26, 27, 28, 29, 30, 31, 33, 39, 40, 41, ),
        /* 97 */ array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 26, 27, 28, 29, 30, 31, 33, 39, 40, 41, ),
        /* 98 */ array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 26, 27, 28, 29, 30, 31, 33, 39, 40, 41, ),
        /* 99 */ array(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 26, 27, 28, 29, 30, 31, 33, 39, 40, 41, ),
        /* 100 */ array(3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 26, 27, 28, 29, 30, 31, 33, 39, 40, 41, ),
        /* 101 */ array(4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 26, 27, 28, 29, 30, 31, 33, 39, 40, 41, ),
        /* 102 */ array(8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 26, 27, 28, 29, 30, 31, 33, 39, 40, 41, ),
        /* 103 */ array(8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 26, 27, 28, 29, 30, 31, 33, 39, 40, 41, ),
        /* 104 */ array(8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 26, 27, 28, 29, 30, 31, 33, 39, 40, 41, ),
        /* 105 */ array(8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 26, 27, 28, 29, 30, 31, 33, 39, 40, 41, ),
        /* 106 */ array(12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 26, 27, 28, 29, 30, 31, 33, 39, 40, 41, ),
        /* 107 */ array(12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 26, 27, 28, 29, 30, 31, 33, 39, 40, 41, ),
        /* 108 */ array(12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 26, 27, 28, 29, 30, 31, 33, 39, 40, 41, ),
        /* 109 */ array(12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 26, 27, 28, 29, 30, 31, 33, 39, 40, 41, ),
        /* 110 */ array(14, 15, 16, 17, 18, 19, 20, 21, 25, 26, 27, 28, 29, 30, 31, 33, 39, 40, 41, ),
        /* 111 */ array(14, 15, 16, 17, 18, 19, 20, 21, 25, 26, 27, 28, 29, 30, 31, 33, 39, 40, 41, ),
        /* 112 */ array(16, 17, 18, 19, 20, 21, 25, 26, 27, 28, 29, 30, 31, 33, 39, 40, 41, ),
        /* 113 */ array(16, 17, 18, 19, 20, 21, 25, 26, 27, 28, 29, 30, 31, 33, 39, 40, 41, ),
        /* 114 */ array(20, 21, 25, 26, 27, 28, 29, 30, 31, 33, 39, 40, 41, ),
        /* 115 */ array(20, 21, 25, 26, 27, 28, 29, 30, 31, 33, 39, 40, 41, ),
        /* 116 */ array(20, 21, 25, 26, 27, 28, 29, 30, 31, 33, 39, 40, 41, ),
        /* 117 */ array(20, 21, 25, 26, 27, 28, 29, 30, 31, 33, 39, 40, 41, ),
        /* 118 */ array(25, 26, 27, 28, 29, 30, 31, 33, 39, 40, 41, ),
        /* 119 */ array(25, 26, 27, 28, 29, 30, 31, 33, 39, 40, 41, ),
        /* 120 */ array(29, 30, 31, 33, 39, 40, 41, ),
        /* 121 */ array(29, 30, 31, 33, 39, 40, 41, ),
        /* 122 */ array(29, 30, 31, 33, 39, 40, 41, ),
        /* 123 */ array(29, 30, 31, 33, 39, 40, 41, ),
        /* 124 */ array(33, 39, 40, 41, ),
        /* 125 */ array(33, 39, 40, 41, ),
        /* 126 */ array(33, 39, 40, 41, ),
        /* 127 */ array(33, 39, 40, 41, ),
        /* 128 */ array(33, 39, 40, 41, ),
        /* 129 */ array(39, 40, 41, ),
        /* 130 */ array(42, 50, 51, ),
        /* 131 */ array(56, ),
        /* 132 */ array(60, ),
        /* 133 */ array(60, ),
        /* 134 */ array(60, ),
        /* 135 */ array(51, ),
        /* 136 */ array(55, ),
        /* 137 */ array(50, ),
        /* 138 */ array(60, ),
        /* 139 */ array(50, ),
        /* 140 */ array(43, ),
        /* 141 */ array(60, ),
        /* 142 */ array(43, ),
        /* 143 */ array(43, ),
        /* 144 */ array(42, ),
        /* 145 */ array(58, ),
        /* 146 */ array(50, ),
        /* 147 */ array(60, ),
        /* 148 */ array(50, ),
        /* 149 */ array(50, ),
        /* 150 */ array(60, ),
        /* 151 */ array(42, ),
        /* 152 */ array(60, ),
        /* 153 */ array(),
        /* 154 */ array(),
        /* 155 */ array(),
        /* 156 */ array(),
        /* 157 */ array(),
        /* 158 */ array(),
        /* 159 */ array(),
        /* 160 */ array(),
        /* 161 */ array(),
        /* 162 */ array(),
        /* 163 */ array(),
        /* 164 */ array(),
        /* 165 */ array(),
        /* 166 */ array(),
        /* 167 */ array(),
        /* 168 */ array(),
        /* 169 */ array(),
        /* 170 */ array(),
        /* 171 */ array(),
        /* 172 */ array(),
        /* 173 */ array(),
        /* 174 */ array(),
        /* 175 */ array(),
        /* 176 */ array(),
        /* 177 */ array(),
        /* 178 */ array(),
        /* 179 */ array(),
        /* 180 */ array(),
        /* 181 */ array(),
        /* 182 */ array(),
        /* 183 */ array(),
        /* 184 */ array(),
        /* 185 */ array(),
        /* 186 */ array(),
        /* 187 */ array(),
        /* 188 */ array(),
        /* 189 */ array(),
        /* 190 */ array(),
        /* 191 */ array(),
        /* 192 */ array(),
        /* 193 */ array(),
        /* 194 */ array(),
        /* 195 */ array(),
        /* 196 */ array(),
        /* 197 */ array(),
        /* 198 */ array(),
        /* 199 */ array(),
        /* 200 */ array(),
        /* 201 */ array(),
        /* 202 */ array(),
        /* 203 */ array(),
        /* 204 */ array(),
        /* 205 */ array(),
        /* 206 */ array(),
        /* 207 */ array(),
);
    static public $yy_default = array(
 /*     0 */   320,  320,  320,  320,  320,  320,  320,  320,  320,  320,
 /*    10 */   320,  320,  320,  320,  320,  320,  320,  320,  320,  320,
 /*    20 */   320,  320,  320,  320,  320,  320,  320,  320,  320,  320,
 /*    30 */   320,  320,  320,  320,  320,  320,  320,  320,  320,  320,
 /*    40 */   320,  320,  320,  320,  320,  320,  320,  320,  320,  320,
 /*    50 */   320,  320,  320,  320,  320,  320,  320,  320,  320,  320,
 /*    60 */   320,  320,  320,  320,  320,  320,  263,  287,  262,  252,
 /*    70 */   271,  245,  258,  247,  320,  316,  281,  320,  320,  281,
 /*    80 */   320,  320,  320,  313,  320,  249,  251,  208,  280,  320,
 /*    90 */   238,  239,  320,  320,  320,  320,  320,  240,  320,  215,
 /*   100 */   216,  217,  220,  221,  219,  222,  226,  223,  225,  224,
 /*   110 */   233,  232,  234,  235,  230,  231,  228,  229,  236,  237,
 /*   120 */   211,  210,  209,  227,  214,  241,  213,  218,  212,  248,
 /*   130 */   320,  278,  299,  297,  320,  320,  320,  320,  295,  320,
 /*   140 */   320,  320,  320,  320,  318,  282,  320,  293,  320,  320,
 /*   150 */   320,  305,  320,  253,  319,  282,  317,  315,  254,  314,
 /*   160 */   259,  260,  257,  256,  255,  301,  294,  292,  250,  246,
 /*   170 */   244,  243,  300,  302,  310,  309,  304,  311,  312,  242,
 /*   180 */   308,  274,  273,  275,  265,  264,  266,  272,  269,  270,
 /*   190 */   268,  298,  267,  276,  286,  261,  284,  283,  306,  307,
 /*   200 */   285,  288,  291,  277,  290,  279,  289,  296,
);
    const YYNOCODE = 97;
    const YYSTACKDEPTH = 100;
    const YYNSTATE = 208;
    const YYNRULE = 112;
    const YYERRORSYMBOL = 62;
    const YYERRSYMDT = 'yy0';
    const YYFALLBACK = 0;
    static public $yyFallback = array(
    );
    static function Trace($TraceFILE, $zTracePrompt)
    {
        if (!$TraceFILE) {
            $zTracePrompt = 0;
        } elseif (!$zTracePrompt) {
            $TraceFILE = 0;
        }
        self::$yyTraceFILE = $TraceFILE;
        self::$yyTracePrompt = $zTracePrompt;
    }

    static function PrintTrace()
    {
        self::$yyTraceFILE = fopen('php://output', 'w');
        self::$yyTracePrompt = '<br>';
    }

    static public $yyTraceFILE;
    static public $yyTracePrompt;
    public $yyidx;                    /* Index of top element in stack */
    public $yyerrcnt;                 /* Shifts left before out of the error */
    public $yystack = array();  /* The parser's stack */

    public $yyTokenName = array( 
  '$',             'AND',           'OR',            'XOR',         
  'EQUALS',        'EQUALS_T',      'NEQUALS',       'NEQUALS_T',   
  'GT',            'GTE',           'LT',            'LTE',         
  'IS_BETWEEN',    'IS_NOT_BETWEEN',  'IS_EITHER',     'IS_NEITHER',  
  'CONTAINS',      'CONTAINS_EITHER',  'CONTAINS_NEITHER',  'CONTAINS_BOTH',
  'IS_IN',         'IS_NOT_IN',     'IS_IN_EITHER',  'IS_IN_NEITHER',
  'IS_IN_BOTH',    'ADD',           'SUB',           'MINUS',       
  'CONCAT',        'MUL',           'DIV',           'MOD',         
  'COLON',         'EXP',           'NOT',           'ASSIGN',      
  'INCREMENT',     'DECREMENT',     'NOR',           'IS_EITHER_IN',
  'IS_NEITHER_IN',  'IS_BOTH_IN',    'L_BRACKET',     'R_BRACKET',   
  'IS',            'EXISTS',        'CLONE',         'BACKTICK_STRING',
  'NULL',          'STRING',        'IDENTIFIER',    'NUMBER',      
  'TRUE',          'FALSE',         'LSQ_BRACKET',   'RSQ_BRACKET', 
  'COMMA',         'DOLLAR',        'AT',            'DOT',         
  'OBJECT_OPERATOR',  'NEW',           'error',         'overall_expr',
  'expr',          'cexpr',         'variable',      'static_value',
  'calculated',    'language_variable',  'container_creator',  'object_creator',
  'simple_variable',  'object_field_call',  'class_field_call',  'array_call',  
  'script_variable',  'template_variable',  'container',     'number',      
  'string',        'boolean',       'container_def',  'single_container_def',
  'container_call',  'single_container_call',  'field_call',    'object_method_call',
  'method_call',   'object_call_list',  'class_method_call',  'object_call', 
  'functional',    'function_call',  'argument_list',  'array_call_list',
    );

    static public $yyRuleName = array(
 /*   0 */ "overall_expr ::= expr",
 /*   1 */ "expr ::= expr ADD expr",
 /*   2 */ "expr ::= expr SUB expr",
 /*   3 */ "expr ::= expr MINUS expr",
 /*   4 */ "expr ::= expr MUL expr",
 /*   5 */ "expr ::= expr DIV expr",
 /*   6 */ "expr ::= expr MOD expr",
 /*   7 */ "expr ::= expr AND expr",
 /*   8 */ "expr ::= expr OR expr",
 /*   9 */ "expr ::= expr XOR expr",
 /*  10 */ "expr ::= expr EXP expr",
 /*  11 */ "expr ::= expr EQUALS expr",
 /*  12 */ "expr ::= expr EQUALS_T expr",
 /*  13 */ "expr ::= expr NEQUALS expr",
 /*  14 */ "expr ::= expr NEQUALS_T expr",
 /*  15 */ "expr ::= expr GT expr",
 /*  16 */ "expr ::= expr GTE expr",
 /*  17 */ "expr ::= expr LT expr",
 /*  18 */ "expr ::= expr LTE expr",
 /*  19 */ "expr ::= expr CONCAT expr",
 /*  20 */ "cexpr ::= expr CONTAINS expr",
 /*  21 */ "cexpr ::= expr CONTAINS_EITHER expr OR expr",
 /*  22 */ "cexpr ::= expr CONTAINS_NEITHER expr NOR expr",
 /*  23 */ "cexpr ::= expr CONTAINS_BOTH expr AND expr",
 /*  24 */ "cexpr ::= expr IS_BETWEEN expr AND expr",
 /*  25 */ "cexpr ::= expr IS_NOT_BETWEEN expr AND expr",
 /*  26 */ "cexpr ::= expr IS_EITHER expr OR expr",
 /*  27 */ "cexpr ::= expr IS_NEITHER expr NOR expr",
 /*  28 */ "cexpr ::= expr IS_IN expr",
 /*  29 */ "cexpr ::= expr IS_NOT_IN expr",
 /*  30 */ "cexpr ::= expr IS_EITHER_IN expr OR expr",
 /*  31 */ "cexpr ::= expr IS_NEITHER_IN expr NOR expr",
 /*  32 */ "cexpr ::= expr IS_BOTH_IN expr AND expr",
 /*  33 */ "expr ::= NOT expr",
 /*  34 */ "expr ::= L_BRACKET expr R_BRACKET",
 /*  35 */ "expr ::= cexpr",
 /*  36 */ "expr ::= variable INCREMENT",
 /*  37 */ "expr ::= INCREMENT variable",
 /*  38 */ "expr ::= variable DECREMENT",
 /*  39 */ "expr ::= DECREMENT variable",
 /*  40 */ "expr ::= variable ASSIGN expr",
 /*  41 */ "expr ::= variable IS expr",
 /*  42 */ "expr ::= variable EXISTS",
 /*  43 */ "expr ::= CLONE expr",
 /*  44 */ "expr ::= variable",
 /*  45 */ "expr ::= static_value",
 /*  46 */ "expr ::= calculated",
 /*  47 */ "expr ::= language_variable",
 /*  48 */ "expr ::= container_creator",
 /*  49 */ "expr ::= object_creator",
 /*  50 */ "variable ::= simple_variable",
 /*  51 */ "variable ::= object_field_call",
 /*  52 */ "variable ::= class_field_call",
 /*  53 */ "variable ::= array_call",
 /*  54 */ "simple_variable ::= script_variable",
 /*  55 */ "simple_variable ::= template_variable",
 /*  56 */ "simple_variable ::= container",
 /*  57 */ "static_value ::= number",
 /*  58 */ "static_value ::= string",
 /*  59 */ "static_value ::= BACKTICK_STRING",
 /*  60 */ "static_value ::= boolean",
 /*  61 */ "static_value ::= NULL",
 /*  62 */ "string ::= STRING",
 /*  63 */ "string ::= IDENTIFIER",
 /*  64 */ "number ::= NUMBER",
 /*  65 */ "number ::= MINUS NUMBER",
 /*  66 */ "boolean ::= TRUE",
 /*  67 */ "boolean ::= FALSE",
 /*  68 */ "container_creator ::= LSQ_BRACKET RSQ_BRACKET",
 /*  69 */ "container_creator ::= LSQ_BRACKET container_def RSQ_BRACKET",
 /*  70 */ "container_def ::= single_container_def",
 /*  71 */ "container_def ::= single_container_def COMMA container_def",
 /*  72 */ "single_container_def ::= expr COLON expr",
 /*  73 */ "single_container_def ::= expr",
 /*  74 */ "script_variable ::= DOLLAR IDENTIFIER",
 /*  75 */ "template_variable ::= AT IDENTIFIER",
 /*  76 */ "language_variable ::= DOLLAR IDENTIFIER AT IDENTIFIER",
 /*  77 */ "container ::= script_variable container_call",
 /*  78 */ "container ::= template_variable container_call",
 /*  79 */ "container_call ::= single_container_call",
 /*  80 */ "container_call ::= single_container_call container_call",
 /*  81 */ "single_container_call ::= DOT IDENTIFIER",
 /*  82 */ "single_container_call ::= DOT NUMBER",
 /*  83 */ "single_container_call ::= DOT L_BRACKET expr R_BRACKET",
 /*  84 */ "object_field_call ::= variable OBJECT_OPERATOR field_call",
 /*  85 */ "object_method_call ::= variable OBJECT_OPERATOR method_call",
 /*  86 */ "object_field_call ::= variable object_call_list OBJECT_OPERATOR field_call",
 /*  87 */ "object_method_call ::= variable object_call_list OBJECT_OPERATOR method_call",
 /*  88 */ "class_field_call ::= IDENTIFIER OBJECT_OPERATOR field_call",
 /*  89 */ "class_method_call ::= IDENTIFIER OBJECT_OPERATOR method_call",
 /*  90 */ "class_field_call ::= IDENTIFIER object_call_list OBJECT_OPERATOR field_call",
 /*  91 */ "class_method_call ::= IDENTIFIER object_call_list OBJECT_OPERATOR method_call",
 /*  92 */ "object_call_list ::= OBJECT_OPERATOR object_call",
 /*  93 */ "object_call_list ::= object_call_list OBJECT_OPERATOR object_call",
 /*  94 */ "object_call ::= method_call",
 /*  95 */ "object_call ::= field_call",
 /*  96 */ "method_call ::= functional",
 /*  97 */ "field_call ::= IDENTIFIER",
 /*  98 */ "calculated ::= function_call",
 /*  99 */ "calculated ::= object_method_call",
 /* 100 */ "calculated ::= class_method_call",
 /* 101 */ "function_call ::= functional",
 /* 102 */ "functional ::= IDENTIFIER L_BRACKET argument_list R_BRACKET",
 /* 103 */ "functional ::= IDENTIFIER L_BRACKET container_def R_BRACKET",
 /* 104 */ "functional ::= IDENTIFIER L_BRACKET R_BRACKET",
 /* 105 */ "argument_list ::= expr",
 /* 106 */ "argument_list ::= expr COMMA argument_list",
 /* 107 */ "array_call ::= simple_variable array_call_list",
 /* 108 */ "array_call_list ::= LSQ_BRACKET expr RSQ_BRACKET",
 /* 109 */ "array_call_list ::= LSQ_BRACKET expr RSQ_BRACKET array_call_list",
 /* 110 */ "object_creator ::= NEW IDENTIFIER",
 /* 111 */ "object_creator ::= NEW IDENTIFIER L_BRACKET argument_list R_BRACKET",
    );

    function tokenName($tokenType)
    {
        if ($tokenType === 0) {
            return 'End of Input';
        }
        if ($tokenType > 0 && $tokenType < count($this->yyTokenName)) {
            return $this->yyTokenName[$tokenType];
        } else {
            return "Unknown";
        }
    }

    static function yy_destructor($yymajor, $yypminor)
    {
        switch ($yymajor) {
            default:  break;   /* If no destructor action specified: do nothing */
        }
    }

    function yy_pop_parser_stack()
    {
        if (!count($this->yystack)) {
            return;
        }
        $yytos = array_pop($this->yystack);
        if (self::$yyTraceFILE && $this->yyidx >= 0) {
            fwrite(self::$yyTraceFILE,
                self::$yyTracePrompt . 'Popping ' . $this->yyTokenName[$yytos->major] .
                    "\n");
        }
        $yymajor = $yytos->major;
        self::yy_destructor($yymajor, $yytos->minor);
        $this->yyidx--;
        return $yymajor;
    }

    function __destruct()
    {
        while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
        if (is_resource(self::$yyTraceFILE)) {
            fclose(self::$yyTraceFILE);
        }
    }

    function yy_get_expected_tokens($token)
    {
        $state = $this->yystack[$this->yyidx]->stateno;
        $expected = self::$yyExpectedTokens[$state];
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return $expected;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return array_unique($expected);
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate])) {
                        $expected += self::$yyExpectedTokens[$nextstate];
                            if (in_array($token,
                                  self::$yyExpectedTokens[$nextstate], true)) {
                            $this->yyidx = $yyidx;
                            $this->yystack = $stack;
                            return array_unique($expected);
                        }
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new Opt_Expression_Standard_yyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return array_unique($expected);
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return $expected;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
        return array_unique($expected);
    }

    function yy_is_expected_token($token)
    {
        if ($token === 0) {
            return true; // 0 is not part of this
        }
        $state = $this->yystack[$this->yyidx]->stateno;
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return true;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return true;
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate]) &&
                          in_array($token, self::$yyExpectedTokens[$nextstate], true)) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        return true;
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new Opt_Expression_Standard_yyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        if (!$token) {
                            // end of input: this is valid
                            return true;
                        }
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return false;
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return true;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
        $this->yyidx = $yyidx;
        $this->yystack = $stack;
        return true;
    }

   function yy_find_shift_action($iLookAhead)
    {
        $stateno = $this->yystack[$this->yyidx]->stateno;
     
        /* if ($this->yyidx < 0) return self::YY_NO_ACTION;  */
        if (!isset(self::$yy_shift_ofst[$stateno])) {
            // no shift actions
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_shift_ofst[$stateno];
        if ($i === self::YY_SHIFT_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            if (count(self::$yyFallback) && $iLookAhead < count(self::$yyFallback)
                   && ($iFallback = self::$yyFallback[$iLookAhead]) != 0) {
                if (self::$yyTraceFILE) {
                    fwrite(self::$yyTraceFILE, self::$yyTracePrompt . "FALLBACK " .
                        $this->yyTokenName[$iLookAhead] . " => " .
                        $this->yyTokenName[$iFallback] . "\n");
                }
                return $this->yy_find_shift_action($iFallback);
            }
            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    function yy_find_reduce_action($stateno, $iLookAhead)
    {
        /* $stateno = $this->yystack[$this->yyidx]->stateno; */

        if (!isset(self::$yy_reduce_ofst[$stateno])) {
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_reduce_ofst[$stateno];
        if ($i == self::YY_REDUCE_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    function yy_shift($yyNewState, $yyMajor, $yypMinor)
    {
        $this->yyidx++;
        if ($this->yyidx >= self::YYSTACKDEPTH) {
            $this->yyidx--;
            if (self::$yyTraceFILE) {
                fprintf(self::$yyTraceFILE, "%sStack Overflow!\n", self::$yyTracePrompt);
            }
            while ($this->yyidx >= 0) {
                $this->yy_pop_parser_stack();
            }
            return;
        }
        $yytos = new Opt_Expression_Standard_yyStackEntry;
        $yytos->stateno = $yyNewState;
        $yytos->major = $yyMajor;
        $yytos->minor = $yypMinor;
        array_push($this->yystack, $yytos);
        if (self::$yyTraceFILE && $this->yyidx > 0) {
            fprintf(self::$yyTraceFILE, "%sShift %d\n", self::$yyTracePrompt,
                $yyNewState);
            fprintf(self::$yyTraceFILE, "%sStack:", self::$yyTracePrompt);
            for($i = 1; $i <= $this->yyidx; $i++) {
                fprintf(self::$yyTraceFILE, " %s",
                    $this->yyTokenName[$this->yystack[$i]->major]);
            }
            fwrite(self::$yyTraceFILE,"\n");
        }
    }

    static public $yyRuleInfo = array(
  array( 'lhs' => 63, 'rhs' => 1 ),
  array( 'lhs' => 64, 'rhs' => 3 ),
  array( 'lhs' => 64, 'rhs' => 3 ),
  array( 'lhs' => 64, 'rhs' => 3 ),
  array( 'lhs' => 64, 'rhs' => 3 ),
  array( 'lhs' => 64, 'rhs' => 3 ),
  array( 'lhs' => 64, 'rhs' => 3 ),
  array( 'lhs' => 64, 'rhs' => 3 ),
  array( 'lhs' => 64, 'rhs' => 3 ),
  array( 'lhs' => 64, 'rhs' => 3 ),
  array( 'lhs' => 64, 'rhs' => 3 ),
  array( 'lhs' => 64, 'rhs' => 3 ),
  array( 'lhs' => 64, 'rhs' => 3 ),
  array( 'lhs' => 64, 'rhs' => 3 ),
  array( 'lhs' => 64, 'rhs' => 3 ),
  array( 'lhs' => 64, 'rhs' => 3 ),
  array( 'lhs' => 64, 'rhs' => 3 ),
  array( 'lhs' => 64, 'rhs' => 3 ),
  array( 'lhs' => 64, 'rhs' => 3 ),
  array( 'lhs' => 64, 'rhs' => 3 ),
  array( 'lhs' => 65, 'rhs' => 3 ),
  array( 'lhs' => 65, 'rhs' => 5 ),
  array( 'lhs' => 65, 'rhs' => 5 ),
  array( 'lhs' => 65, 'rhs' => 5 ),
  array( 'lhs' => 65, 'rhs' => 5 ),
  array( 'lhs' => 65, 'rhs' => 5 ),
  array( 'lhs' => 65, 'rhs' => 5 ),
  array( 'lhs' => 65, 'rhs' => 5 ),
  array( 'lhs' => 65, 'rhs' => 3 ),
  array( 'lhs' => 65, 'rhs' => 3 ),
  array( 'lhs' => 65, 'rhs' => 5 ),
  array( 'lhs' => 65, 'rhs' => 5 ),
  array( 'lhs' => 65, 'rhs' => 5 ),
  array( 'lhs' => 64, 'rhs' => 2 ),
  array( 'lhs' => 64, 'rhs' => 3 ),
  array( 'lhs' => 64, 'rhs' => 1 ),
  array( 'lhs' => 64, 'rhs' => 2 ),
  array( 'lhs' => 64, 'rhs' => 2 ),
  array( 'lhs' => 64, 'rhs' => 2 ),
  array( 'lhs' => 64, 'rhs' => 2 ),
  array( 'lhs' => 64, 'rhs' => 3 ),
  array( 'lhs' => 64, 'rhs' => 3 ),
  array( 'lhs' => 64, 'rhs' => 2 ),
  array( 'lhs' => 64, 'rhs' => 2 ),
  array( 'lhs' => 64, 'rhs' => 1 ),
  array( 'lhs' => 64, 'rhs' => 1 ),
  array( 'lhs' => 64, 'rhs' => 1 ),
  array( 'lhs' => 64, 'rhs' => 1 ),
  array( 'lhs' => 64, 'rhs' => 1 ),
  array( 'lhs' => 64, 'rhs' => 1 ),
  array( 'lhs' => 66, 'rhs' => 1 ),
  array( 'lhs' => 66, 'rhs' => 1 ),
  array( 'lhs' => 66, 'rhs' => 1 ),
  array( 'lhs' => 66, 'rhs' => 1 ),
  array( 'lhs' => 72, 'rhs' => 1 ),
  array( 'lhs' => 72, 'rhs' => 1 ),
  array( 'lhs' => 72, 'rhs' => 1 ),
  array( 'lhs' => 67, 'rhs' => 1 ),
  array( 'lhs' => 67, 'rhs' => 1 ),
  array( 'lhs' => 67, 'rhs' => 1 ),
  array( 'lhs' => 67, 'rhs' => 1 ),
  array( 'lhs' => 67, 'rhs' => 1 ),
  array( 'lhs' => 80, 'rhs' => 1 ),
  array( 'lhs' => 80, 'rhs' => 1 ),
  array( 'lhs' => 79, 'rhs' => 1 ),
  array( 'lhs' => 79, 'rhs' => 2 ),
  array( 'lhs' => 81, 'rhs' => 1 ),
  array( 'lhs' => 81, 'rhs' => 1 ),
  array( 'lhs' => 70, 'rhs' => 2 ),
  array( 'lhs' => 70, 'rhs' => 3 ),
  array( 'lhs' => 82, 'rhs' => 1 ),
  array( 'lhs' => 82, 'rhs' => 3 ),
  array( 'lhs' => 83, 'rhs' => 3 ),
  array( 'lhs' => 83, 'rhs' => 1 ),
  array( 'lhs' => 76, 'rhs' => 2 ),
  array( 'lhs' => 77, 'rhs' => 2 ),
  array( 'lhs' => 69, 'rhs' => 4 ),
  array( 'lhs' => 78, 'rhs' => 2 ),
  array( 'lhs' => 78, 'rhs' => 2 ),
  array( 'lhs' => 84, 'rhs' => 1 ),
  array( 'lhs' => 84, 'rhs' => 2 ),
  array( 'lhs' => 85, 'rhs' => 2 ),
  array( 'lhs' => 85, 'rhs' => 2 ),
  array( 'lhs' => 85, 'rhs' => 4 ),
  array( 'lhs' => 73, 'rhs' => 3 ),
  array( 'lhs' => 87, 'rhs' => 3 ),
  array( 'lhs' => 73, 'rhs' => 4 ),
  array( 'lhs' => 87, 'rhs' => 4 ),
  array( 'lhs' => 74, 'rhs' => 3 ),
  array( 'lhs' => 90, 'rhs' => 3 ),
  array( 'lhs' => 74, 'rhs' => 4 ),
  array( 'lhs' => 90, 'rhs' => 4 ),
  array( 'lhs' => 89, 'rhs' => 2 ),
  array( 'lhs' => 89, 'rhs' => 3 ),
  array( 'lhs' => 91, 'rhs' => 1 ),
  array( 'lhs' => 91, 'rhs' => 1 ),
  array( 'lhs' => 88, 'rhs' => 1 ),
  array( 'lhs' => 86, 'rhs' => 1 ),
  array( 'lhs' => 68, 'rhs' => 1 ),
  array( 'lhs' => 68, 'rhs' => 1 ),
  array( 'lhs' => 68, 'rhs' => 1 ),
  array( 'lhs' => 93, 'rhs' => 1 ),
  array( 'lhs' => 92, 'rhs' => 4 ),
  array( 'lhs' => 92, 'rhs' => 4 ),
  array( 'lhs' => 92, 'rhs' => 3 ),
  array( 'lhs' => 94, 'rhs' => 1 ),
  array( 'lhs' => 94, 'rhs' => 3 ),
  array( 'lhs' => 75, 'rhs' => 2 ),
  array( 'lhs' => 95, 'rhs' => 3 ),
  array( 'lhs' => 95, 'rhs' => 4 ),
  array( 'lhs' => 71, 'rhs' => 2 ),
  array( 'lhs' => 71, 'rhs' => 5 ),
    );

    static public $yyReduceMap = array(
        0 => 0,
        1 => 1,
        2 => 2,
        3 => 2,
        4 => 4,
        5 => 5,
        6 => 6,
        7 => 7,
        8 => 8,
        9 => 9,
        10 => 10,
        11 => 11,
        12 => 12,
        13 => 13,
        14 => 14,
        15 => 15,
        16 => 16,
        17 => 17,
        18 => 18,
        19 => 19,
        20 => 20,
        21 => 21,
        22 => 22,
        23 => 23,
        24 => 24,
        25 => 25,
        26 => 26,
        27 => 27,
        28 => 28,
        29 => 29,
        30 => 30,
        31 => 31,
        32 => 32,
        33 => 33,
        34 => 34,
        35 => 35,
        81 => 35,
        82 => 35,
        36 => 36,
        38 => 36,
        37 => 37,
        39 => 39,
        40 => 40,
        41 => 40,
        42 => 42,
        43 => 43,
        44 => 44,
        45 => 45,
        46 => 45,
        47 => 45,
        48 => 45,
        49 => 45,
        51 => 45,
        52 => 45,
        53 => 45,
        54 => 45,
        55 => 45,
        56 => 45,
        50 => 50,
        57 => 57,
        58 => 57,
        60 => 57,
        59 => 59,
        61 => 61,
        62 => 62,
        63 => 62,
        64 => 64,
        65 => 65,
        66 => 66,
        67 => 67,
        74 => 74,
        75 => 75,
        77 => 77,
        78 => 78,
        79 => 79,
        80 => 80,
        83 => 83,
    );
#line 49 "expression_parser.y"
    function yy_r0(){	$this->_retvalue = $this->_expr->_finalize($this->yystack[$this->yyidx + 0]->minor);	    }
#line 1660 "expression_parser.php"
#line 50 "expression_parser.y"
    function yy_r1(){	$this->_retvalue = $this->_expr->_stdOperator('+', $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor, Opt_Expression_Standard::MATH_OP_WEIGHT);	    }
#line 1663 "expression_parser.php"
#line 51 "expression_parser.y"
    function yy_r2(){	$this->_retvalue = $this->_expr->_stdOperator('-', $this->yystack[$this->yyidx + -2]->minor,  $this->yystack[$this->yyidx + 0]->minor, Opt_Expression_Standard::MATH_OP_WEIGHT);	    }
#line 1666 "expression_parser.php"
#line 53 "expression_parser.y"
    function yy_r4(){	$this->_retvalue = $this->_expr->_stdOperator('*',  $this->yystack[$this->yyidx + -2]->minor,  $this->yystack[$this->yyidx + 0]->minor, Opt_Expression_Standard::MATH_OP_WEIGHT);	    }
#line 1669 "expression_parser.php"
#line 54 "expression_parser.y"
    function yy_r5(){	$this->_retvalue = $this->_expr->_stdOperator('/',  $this->yystack[$this->yyidx + -2]->minor,  $this->yystack[$this->yyidx + 0]->minor, Opt_Expression_Standard::MATH_OP_WEIGHT);	    }
#line 1672 "expression_parser.php"
#line 55 "expression_parser.y"
    function yy_r6(){	$this->_retvalue = $this->_expr->_stdOperator('%',  $this->yystack[$this->yyidx + -2]->minor,  $this->yystack[$this->yyidx + 0]->minor, Opt_Expression_Standard::MATH_OP_WEIGHT);	    }
#line 1675 "expression_parser.php"
#line 56 "expression_parser.y"
    function yy_r7(){	$this->_retvalue = $this->_expr->_stdOperator('&&',  $this->yystack[$this->yyidx + -2]->minor,  $this->yystack[$this->yyidx + 0]->minor, Opt_Expression_Standard::LOGICAL_OP_WEIGHT);	    }
#line 1678 "expression_parser.php"
#line 57 "expression_parser.y"
    function yy_r8(){	$this->_retvalue = $this->_expr->_stdOperator('||',  $this->yystack[$this->yyidx + -2]->minor,  $this->yystack[$this->yyidx + 0]->minor, Opt_Expression_Standard::LOGICAL_OP_WEIGHT);	    }
#line 1681 "expression_parser.php"
#line 58 "expression_parser.y"
    function yy_r9(){	$this->_retvalue = $this->_expr->_stdOperator(' xor ',  $this->yystack[$this->yyidx + -2]->minor,  $this->yystack[$this->yyidx + 0]->minor, Opt_Expression_Standard::LOGICAL_OP_WEIGHT);	    }
#line 1684 "expression_parser.php"
#line 59 "expression_parser.y"
    function yy_r10(){	$this->_retvalue = $this->_expr->_functionalOperator('pow', array( $this->yystack[$this->yyidx + -2]->minor,  $this->yystack[$this->yyidx + 0]->minor), Opt_Expression_Standard::FUNCTIONAL_OP_WEIGHT);	    }
#line 1687 "expression_parser.php"
#line 60 "expression_parser.y"
    function yy_r11(){	$this->_retvalue = $this->_expr->_stdOperator('==',  $this->yystack[$this->yyidx + -2]->minor,  $this->yystack[$this->yyidx + 0]->minor, Opt_Expression_Standard::COMPARE_OP_WEIGHT);	    }
#line 1690 "expression_parser.php"
#line 61 "expression_parser.y"
    function yy_r12(){	$this->_retvalue = $this->_expr->_stdOperator('===',  $this->yystack[$this->yyidx + -2]->minor,  $this->yystack[$this->yyidx + 0]->minor, Opt_Expression_Standard::COMPARE_OP_WEIGHT);	    }
#line 1693 "expression_parser.php"
#line 62 "expression_parser.y"
    function yy_r13(){	$this->_retvalue = $this->_expr->_stdOperator('!=',  $this->yystack[$this->yyidx + -2]->minor,  $this->yystack[$this->yyidx + 0]->minor, Opt_Expression_Standard::COMPARE_OP_WEIGHT);	    }
#line 1696 "expression_parser.php"
#line 63 "expression_parser.y"
    function yy_r14(){	$this->_retvalue = $this->_expr->_stdOperator('!==',  $this->yystack[$this->yyidx + -2]->minor,  $this->yystack[$this->yyidx + 0]->minor, Opt_Expression_Standard::COMPARE_OP_WEIGHT);	    }
#line 1699 "expression_parser.php"
#line 64 "expression_parser.y"
    function yy_r15(){	$this->_retvalue = $this->_expr->_stdOperator('>',  $this->yystack[$this->yyidx + -2]->minor,  $this->yystack[$this->yyidx + 0]->minor, Opt_Expression_Standard::COMPARE_OP_WEIGHT);	    }
#line 1702 "expression_parser.php"
#line 65 "expression_parser.y"
    function yy_r16(){	$this->_retvalue = $this->_expr->_stdOperator('>=',  $this->yystack[$this->yyidx + -2]->minor,  $this->yystack[$this->yyidx + 0]->minor, Opt_Expression_Standard::COMPARE_OP_WEIGHT);	    }
#line 1705 "expression_parser.php"
#line 66 "expression_parser.y"
    function yy_r17(){	$this->_retvalue = $this->_expr->_stdOperator('<',  $this->yystack[$this->yyidx + -2]->minor,  $this->yystack[$this->yyidx + 0]->minor, Opt_Expression_Standard::COMPARE_OP_WEIGHT);	    }
#line 1708 "expression_parser.php"
#line 67 "expression_parser.y"
    function yy_r18(){	$this->_retvalue = $this->_expr->_stdOperator('<=',  $this->yystack[$this->yyidx + -2]->minor,  $this->yystack[$this->yyidx + 0]->minor, Opt_Expression_Standard::COMPARE_OP_WEIGHT);	    }
#line 1711 "expression_parser.php"
#line 68 "expression_parser.y"
    function yy_r19(){	$this->_retvalue = $this->_expr->_stdOperator('.',  $this->yystack[$this->yyidx + -2]->minor,  $this->yystack[$this->yyidx + 0]->minor, Opt_Expression_Standard::CONCAT_OP_WEIGHT);	    }
#line 1714 "expression_parser.php"
#line 69 "expression_parser.y"
    function yy_r20(){	$this->_retvalue = $this->_expr->_expressionOperator('contains', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor), Opt_Expression_Standard::DF_OP_WEIGHT);	    }
#line 1717 "expression_parser.php"
#line 70 "expression_parser.y"
    function yy_r21(){	$this->_retvalue = $this->_expr->_expressionOperator('contains_either', array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor), Opt_Expression_Standard::DF_OP_WEIGHT);	    }
#line 1720 "expression_parser.php"
#line 71 "expression_parser.y"
    function yy_r22(){	$this->_retvalue = $this->_expr->_expressionOperator('contains_neither', array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor), Opt_Expression_Standard::DF_OP_WEIGHT);	    }
#line 1723 "expression_parser.php"
#line 72 "expression_parser.y"
    function yy_r23(){	$this->_retvalue = $this->_expr->_expressionOperator('contains_both', array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor), Opt_Expression_Standard::DF_OP_WEIGHT);	    }
#line 1726 "expression_parser.php"
#line 73 "expression_parser.y"
    function yy_r24(){	$this->_retvalue = $this->_expr->_expressionOperator('between', array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor), 2 * Opt_Expression_Standard::COMPARE_OP_WEIGHT);	    }
#line 1729 "expression_parser.php"
#line 74 "expression_parser.y"
    function yy_r25(){	$this->_retvalue = $this->_expr->_expressionOperator('not_between', array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor), 2 * Opt_Expression_Standard::COMPARE_OP_WEIGHT);	    }
#line 1732 "expression_parser.php"
#line 75 "expression_parser.y"
    function yy_r26(){	$this->_retvalue = $this->_expr->_expressionOperator('either', array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor), 2 * Opt_Expression_Standard::COMPARE_OP_WEIGHT);	    }
#line 1735 "expression_parser.php"
#line 76 "expression_parser.y"
    function yy_r27(){	$this->_retvalue = $this->_expr->_expressionOperator('neither', array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor), 2 * Opt_Expression_Standard::COMPARE_OP_WEIGHT);	    }
#line 1738 "expression_parser.php"
#line 77 "expression_parser.y"
    function yy_r28(){	$this->_retvalue = $this->_expr->_expressionOperator('is_in', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor), Opt_Expression_Standard::DF_OP_WEIGHT);	    }
#line 1741 "expression_parser.php"
#line 78 "expression_parser.y"
    function yy_r29(){	$this->_retvalue = $this->_expr->_expressionOperator('is_not_in', array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor), Opt_Expression_Standard::DF_OP_WEIGHT);	    }
#line 1744 "expression_parser.php"
#line 79 "expression_parser.y"
    function yy_r30(){	$this->_retvalue = $this->_expr->_expressionOperator('is_either_in', array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor), Opt_Expression_Standard::DF_OP_WEIGHT);	    }
#line 1747 "expression_parser.php"
#line 80 "expression_parser.y"
    function yy_r31(){	$this->_retvalue = $this->_expr->_expressionOperator('is_neither_in', array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor), Opt_Expression_Standard::DF_OP_WEIGHT);	    }
#line 1750 "expression_parser.php"
#line 81 "expression_parser.y"
    function yy_r32(){	$this->_retvalue = $this->_expr->_expressionOperator('is_both_in', array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor), Opt_Expression_Standard::DF_OP_WEIGHT);	    }
#line 1753 "expression_parser.php"
#line 82 "expression_parser.y"
    function yy_r33(){	$this->_retvalue = $this->_expr->_unaryOperator('!', $this->yystack[$this->yyidx + 0]->minor, Opt_Expression_Standard::LOGICAL_OP_WEIGHT);	    }
#line 1756 "expression_parser.php"
#line 83 "expression_parser.y"
    function yy_r34(){	$this->_retvalue = $this->_expr->_package('(', $this->yystack[$this->yyidx + -1]->minor, Opt_Expression_Standard::PARENTHESES_WEIGHT);	    }
#line 1759 "expression_parser.php"
#line 84 "expression_parser.y"
    function yy_r35(){	$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;	    }
#line 1762 "expression_parser.php"
#line 86 "expression_parser.y"
    function yy_r36(){	$$this->yystack[$this->yyidx + -1]->minor = $this->yystack[$this->yyidx + -1]->minor; $this->_retvalue = $this->_expr->_compileVariable($$this->yystack[$this->yyidx + -1]->minor[0], $$this->yystack[$this->yyidx + -1]->minor[1], Opt_Expression_Standard::INCDEC_OP_WEIGHT, Opt_Expression_Standard::CONTEXT_POSTDECREMENT, null);	    }
#line 1765 "expression_parser.php"
#line 87 "expression_parser.y"
    function yy_r37(){	$$this->yystack[$this->yyidx + 0]->minor = $this->yystack[$this->yyidx + 0]->minor; $this->_retvalue = $this->_expr->_compileVariable($$this->yystack[$this->yyidx + 0]->minor[0], $$this->yystack[$this->yyidx + 0]->minor[1], Opt_Expression_Standard::INCDEC_OP_WEIGHT, Opt_Expression_Standard::CONTEXT_PREINCREMENT, null);	    }
#line 1768 "expression_parser.php"
#line 89 "expression_parser.y"
    function yy_r39(){	$$this->yystack[$this->yyidx + 0]->minor = $this->yystack[$this->yyidx + 0]->minor; $this->_retvalue = $this->_expr->_compileVariable($$this->yystack[$this->yyidx + 0]->minor[0], $$this->yystack[$this->yyidx + 0]->minor[1], Opt_Expression_Standard::INCDEC_OP_WEIGHT, Opt_Expression_Standard::CONTEXT_PREDECREMENT, null);	    }
#line 1771 "expression_parser.php"
#line 90 "expression_parser.y"
    function yy_r40(){	$$this->yystack[$this->yyidx + -2]->minor = $this->yystack[$this->yyidx + -2]->minor; $this->_retvalue = $this->_expr->_compileVariable($$this->yystack[$this->yyidx + -2]->minor[0], $$this->yystack[$this->yyidx + -2]->minor[1],Opt_Expression_Standard::ASSIGN_OP_WEIGHT, Opt_Expression_Standard::CONTEXT_ASSIGN, $this->yystack[$this->yyidx + 0]->minor);	    }
#line 1774 "expression_parser.php"
#line 92 "expression_parser.y"
    function yy_r42(){	$$this->yystack[$this->yyidx + -1]->minor = $this->yystack[$this->yyidx + -1]->minor; $this->_retvalue = $this->_expr->_compileVariable($$this->yystack[$this->yyidx + -1]->minor[0], $$this->yystack[$this->yyidx + -1]->minor[1],Opt_Expression_Standard::ASSIGN_OP_WEIGHT, Opt_Expression_Standard::CONTEXT_EXISTS, expr);	    }
#line 1777 "expression_parser.php"
#line 94 "expression_parser.y"
    function yy_r43(){	$this->_retvalue = $this->_expr->_objective('clone', $this->yystack[$this->yyidx + 0]->minor, Opt_Expression_Standard::CLONE_WEIGHT);	    }
#line 1780 "expression_parser.php"
#line 96 "expression_parser.y"
    function yy_r44(){	$this->_retvalue = $this->_expr->_compileVariable($this->yystack[$this->yyidx + 0]->minor[0], $this->yystack[$this->yyidx + 0]->minor[1], 0);	    }
#line 1783 "expression_parser.php"
#line 97 "expression_parser.y"
    function yy_r45(){	$this->_retvalue =  $this->yystack[$this->yyidx + 0]->minor;	    }
#line 1786 "expression_parser.php"
#line 103 "expression_parser.y"
    function yy_r50(){	$this->yystack[$this->yyidx + 0]->minor[0] = array($this->yystack[$this->yyidx + 0]->minor[0]); $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;	    }
#line 1789 "expression_parser.php"
#line 112 "expression_parser.y"
    function yy_r57(){	$this->_retvalue = $this->_expr->_scalarValue($this->yystack[$this->yyidx + 0]->minor, Opt_Expression_Standard::SCALAR_WEIGHT);	    }
#line 1792 "expression_parser.php"
#line 114 "expression_parser.y"
    function yy_r59(){	$this->_retvalue = $this->_expr->_backtick($this->yystack[$this->yyidx + 0]->minor, Opt_Expression_Standard::BACKTICK_WEIGHT);	    }
#line 1795 "expression_parser.php"
#line 116 "expression_parser.y"
    function yy_r61(){	$this->_retvalue = $this->_expr->_scalarValue('null', Opt_Expression_Standard::SCALAR_WEIGHT);	    }
#line 1798 "expression_parser.php"
#line 118 "expression_parser.y"
    function yy_r62(){ $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;     }
#line 1801 "expression_parser.php"
#line 121 "expression_parser.y"
    function yy_r64(){ $this->_retvalue =  $this->yystack[$this->yyidx + 0]->minor;     }
#line 1804 "expression_parser.php"
#line 122 "expression_parser.y"
    function yy_r65(){ $this->_retvalue = - $this->yystack[$this->yyidx + 0]->minor;     }
#line 1807 "expression_parser.php"
#line 124 "expression_parser.y"
    function yy_r66(){ $this->_retvalue = 'true';     }
#line 1810 "expression_parser.php"
#line 125 "expression_parser.y"
    function yy_r67(){ $this->_retvalue = 'false';     }
#line 1813 "expression_parser.php"
#line 135 "expression_parser.y"
    function yy_r74(){	$this->_retvalue = $this->_expr->_prepareScriptVar($this->yystack[$this->yyidx + 0]->minor);     }
#line 1816 "expression_parser.php"
#line 136 "expression_parser.y"
    function yy_r75(){	$this->_retvalue = $this->_expr->_prepareTemplateVar($this->yystack[$this->yyidx + 0]->minor);     }
#line 1819 "expression_parser.php"
#line 139 "expression_parser.y"
    function yy_r77(){
			$$this->yystack[$this->yyidx + -1]->minor = $this->yystack[$this->yyidx + -1]->minor;
			array_unshift($this->yystack[$this->yyidx + 0]->minor, $$this->yystack[$this->yyidx + -1]->minor[0]);
			$this->_retvalue = new SplFixedArray(2);
			$this->_retvalue[0] = $this->yystack[$this->yyidx + 0]->minor;
			$this->_retvalue[1] = '$';
		    }
#line 1828 "expression_parser.php"
#line 147 "expression_parser.y"
    function yy_r78(){
			$$this->yystack[$this->yyidx + -1]->minor = $this->yystack[$this->yyidx + -1]->minor;
			array_unshift($this->yystack[$this->yyidx + 0]->minor, $$this->yystack[$this->yyidx + -1]->minor[0]);
			$this->_retvalue = new SplFixedArray(2);
			$this->_retvalue[0] = $this->yystack[$this->yyidx + 0]->minor;
			$this->_retvalue[1] = '@';
		    }
#line 1837 "expression_parser.php"
#line 155 "expression_parser.y"
    function yy_r79(){	$this->_retvalue = array($this->yystack[$this->yyidx + 0]->minor);	    }
#line 1840 "expression_parser.php"
#line 156 "expression_parser.y"
    function yy_r80(){	array_unshift($this->yystack[$this->yyidx + 0]->minor, $this->yystack[$this->yyidx + -1]->minor); $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;	    }
#line 1843 "expression_parser.php"
#line 160 "expression_parser.y"
    function yy_r83(){	$this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;	    }
#line 1846 "expression_parser.php"

    private $_retvalue;

    function yy_reduce($yyruleno)
    {
        $yymsp = $this->yystack[$this->yyidx];
        if (self::$yyTraceFILE && $yyruleno >= 0 
              && $yyruleno < count(self::$yyRuleName)) {
            fprintf(self::$yyTraceFILE, "%sReduce (%d) [%s].\n",
                self::$yyTracePrompt, $yyruleno,
                self::$yyRuleName[$yyruleno]);
        }

        $this->_retvalue = $yy_lefthand_side = null;
        if (array_key_exists($yyruleno, self::$yyReduceMap)) {
            // call the action
            $this->_retvalue = null;
            $this->{'yy_r' . self::$yyReduceMap[$yyruleno]}();
            $yy_lefthand_side = $this->_retvalue;
        }
        $yygoto = self::$yyRuleInfo[$yyruleno]['lhs'];
        $yysize = self::$yyRuleInfo[$yyruleno]['rhs'];
        $this->yyidx -= $yysize;
        for($i = $yysize; $i; $i--) {
            // pop all of the right-hand side parameters
            array_pop($this->yystack);
        }
        $yyact = $this->yy_find_reduce_action($this->yystack[$this->yyidx]->stateno, $yygoto);
        if ($yyact < self::YYNSTATE) {
            if (!self::$yyTraceFILE && $yysize) {
                $this->yyidx++;
                $x = new Opt_Expression_Standard_yyStackEntry;
                $x->stateno = $yyact;
                $x->major = $yygoto;
                $x->minor = $yy_lefthand_side;
                $this->yystack[$this->yyidx] = $x;
            } else {
                $this->yy_shift($yyact, $yygoto, $yy_lefthand_side);
            }
        } elseif ($yyact == self::YYNSTATE + self::YYNRULE + 1) {
            $this->yy_accept();
        }
    }

    function yy_parse_failed()
    {
        if (self::$yyTraceFILE) {
            fprintf(self::$yyTraceFILE, "%sFail!\n", self::$yyTracePrompt);
        }
        while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
    }

    function yy_syntax_error($yymajor, $TOKEN)
    {
#line 22 "expression_parser.y"

	throw new Exception('Unexpected '.$TOKEN);
#line 1907 "expression_parser.php"
    }

    function yy_accept()
    {
        if (self::$yyTraceFILE) {
            fprintf(self::$yyTraceFILE, "%sAccept!\n", self::$yyTracePrompt);
        }
        while ($this->yyidx >= 0) {
            $stack = $this->yy_pop_parser_stack();
        }
    }

    function doParse($yymajor, $yytokenvalue)
    {
        $yyerrorhit = 0;   /* True if yymajor has invoked an error */
        
        if ($this->yyidx === null || $this->yyidx < 0) {
            $this->yyidx = 0;
            $this->yyerrcnt = -1;
            $x = new Opt_Expression_Standard_yyStackEntry;
            $x->stateno = 0;
            $x->major = 0;
            $this->yystack = array();
            array_push($this->yystack, $x);
        }
        $yyendofinput = ($yymajor==0);
        
        if (self::$yyTraceFILE) {
            fprintf(self::$yyTraceFILE, "%sInput %s\n",
                self::$yyTracePrompt, $this->yyTokenName[$yymajor]);
        }
        
        do {
            $yyact = $this->yy_find_shift_action($yymajor);
            if ($yymajor < self::YYERRORSYMBOL &&
                  !$this->yy_is_expected_token($yymajor)) {
                // force a syntax error
                $yyact = self::YY_ERROR_ACTION;
            }
            if ($yyact < self::YYNSTATE) {
                $this->yy_shift($yyact, $yymajor, $yytokenvalue);
                $this->yyerrcnt--;
                if ($yyendofinput && $this->yyidx >= 0) {
                    $yymajor = 0;
                } else {
                    $yymajor = self::YYNOCODE;
                }
            } elseif ($yyact < self::YYNSTATE + self::YYNRULE) {
                $this->yy_reduce($yyact - self::YYNSTATE);
            } elseif ($yyact == self::YY_ERROR_ACTION) {
                if (self::$yyTraceFILE) {
                    fprintf(self::$yyTraceFILE, "%sSyntax Error!\n",
                        self::$yyTracePrompt);
                }
                if (self::YYERRORSYMBOL) {
                    if ($this->yyerrcnt < 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $yymx = $this->yystack[$this->yyidx]->major;
                    if ($yymx == self::YYERRORSYMBOL || $yyerrorhit ){
                        if (self::$yyTraceFILE) {
                            fprintf(self::$yyTraceFILE, "%sDiscard input token %s\n",
                                self::$yyTracePrompt, $this->yyTokenName[$yymajor]);
                        }
                        $this->yy_destructor($yymajor, $yytokenvalue);
                        $yymajor = self::YYNOCODE;
                    } else {
                        while ($this->yyidx >= 0 &&
                                 $yymx != self::YYERRORSYMBOL &&
        ($yyact = $this->yy_find_shift_action(self::YYERRORSYMBOL)) >= self::YYNSTATE
                              ){
                            $this->yy_pop_parser_stack();
                        }
                        if ($this->yyidx < 0 || $yymajor==0) {
                            $this->yy_destructor($yymajor, $yytokenvalue);
                            $this->yy_parse_failed();
                            $yymajor = self::YYNOCODE;
                        } elseif ($yymx != self::YYERRORSYMBOL) {
                            $u2 = 0;
                            $this->yy_shift($yyact, self::YYERRORSYMBOL, $u2);
                        }
                    }
                    $this->yyerrcnt = 3;
                    $yyerrorhit = 1;
                } else {
                    if ($this->yyerrcnt <= 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $this->yyerrcnt = 3;
                    $this->yy_destructor($yymajor, $yytokenvalue);
                    if ($yyendofinput) {
                        $this->yy_parse_failed();
                    }
                    $yymajor = self::YYNOCODE;
                }
            } else {
                $this->yy_accept();
                $yymajor = self::YYNOCODE;
            }            
        } while ($yymajor != self::YYNOCODE && $this->yyidx >= 0);
    }
}
