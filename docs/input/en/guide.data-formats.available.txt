Title: Available data formats

----

There are five default data formats available in OPT, and three features they may implement:

1. Ordinary variables
2. Sections
3. Section elements

In this chapter, we will describe them and show, how they should be used.

Available formats
=================

`Array`
:	The default format, implements variables, sections and section elements.

`SingleArray`
:	Very similar to `Generic`. The only difference is how the child section data are handled.

`Objective`
:	Implements variables, sections and section elements. Assumes that the data are objects that may implement one of the standard interfaces, like `Iterator` in case of sections.

`StaticGenerator`
:	The format that generates the data on the fly when they are really needed. It implements only sections.

`RuntimeGenerator`
:	Similar to `StaticGenerator`, but if no generator is provided, it assumes that the script assigned some static data for the sections.

Array
=====

This is the default data format for OPT. It evaluates all the containers as ordinary PHP arrays:

~~~~
[xml]
{$container.item} is equivalent to {$container['item']}
~~~~

The section data are also parsed as arrays. The data format requires a separate template variable to store the data of nested sections in the following style:

~~~~
[xml]
<opt:section name="s1">
	{$s1.item}
	<opt:section name="s2">
		{$s2.item}
	</opt:section>
</opt:section>
~~~~

The PHP code to populate the section with this data format:

~~~~
[php]
$view->s1 = array(0 =>
	array('item' => 'Foo'),
	array('item' => 'Bar'),
	array('item' => 'Joe'),
);
$view->s2 = array(0 =>
	// The data for "s2" items that are in the relationship with "Foo".
	array(0 =>
		array('item' => 'A'),
		array('item' => 'B'),
	),
	// The data for "s2" items that are in the relationship with "Bar".
	array(0 =>
		array('item' => 'C'),
		array('item' => 'D'),
	),
	// The data for "s2" items that are in the relationship with "Joe".
	array(0 =>
		array('item' => 'E'),
		array('item' => 'F'),
	)
);
~~~~

And so on for the deeper relationships.

SingleArray
===========

This data format is an extension to the ordinary `Array` format. It modifies the section behaviour, so that the nested sections are taken from the appropriate items of the upper-level sections. To populate the sections presented above, we would use the following code:

~~~~
[php]
$view->s1 = array(0 =>
	array('item' => 'Foo', 's2' =>
		array(0 =>
			array('item' => 'A'),
			array('item' => 'B'),
		),
	),
	array('item' => 'Bar', 's2' =>
		array(0 =>
			array('item' => 'C'),
			array('item' => 'D'),
		),
	),
	array('item' => 'Joe', 's2' =>
		array(0 =>
			array('item' => 'E'),
			array('item' => 'F'),
		),
	),
);
$view->setFormat('s1', 'SingleArray');	// This is not necessary, as the top-level sections are not affected.
$view->setFormat('s2', 'SingleArray');
~~~~

In other words, the data for the nested sections must be stored under the upper-level section item variable whose name corresponds to the nested section name. In the example the nested section is called `s2`, so the item with its data in `s1` must also be called `s2`.

The other aspects of `Array` format are not changed and work in the same way.

Objective
=========

This data format evaluates the containers as the object calls:

~~~~
[xml]
{$container.item} is equivalent to {$container::item}
~~~~

It can be also applied to sections, allowing to iterate through objects that implement both `Countable` and `Traversable` interfaces (i.e. `Iterator` or `IteratorAggregate`). The nested section data are taken from the appropriate upper-level section item field, like in `SingleArray`. The data format also supports the section item variables that are evaluated as object field calls.

StaticGenerator
===============

This data format can be used with sections only. It allows to specify a function that generates the section data on demand. The script must provide a callback to this function in the template variable that corresponds to the specified section:

> [important]
> The data format **must** be decorated in order to specify, what type of data the requested function is going to generate.

~~~~
[php]

function generateMeSection()
{
	return array(0 =>
		array('item' => 'Foo'),
		array('item' => 'Bar'),
		array('item' => 'Joe'),
	);
} // end generateMeSection();

// We must provide a valid PHP callback
$view->mySection = 'generateMeSection';

// Our function returns the section data packed in array, so we decorate
// the generator with "SingleArray" data format.
$view->setFormat('mySection', 'StaticGenerator/SingleArray');
~~~~

The data format is useful if we want to provide the template designers the sections that do not have to be used by the particular layout. We may request using generator for them, so that the script does not waste the time to retrieve the data that are not displayed at all.

RuntimeGenerator
================

This data format is an extension to the `StaticGenerator`. It allows to provide the generator optionally. If we do not specify the generator, the sections will look for the ordinary data.